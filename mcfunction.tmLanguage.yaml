---
name: mcfunction
scopeName: source.mcfunction
fileTypes:
  - mcfunction

variables:
  token_l: '(?<=\s)'
  token_r: '(?=\s)'
  literal: '[a-z0-9_\.\-]+'
  number: '\-?\d*\.?\d+'
  # resource_location: '(\#?)({{literal}})(\:)({{literal}})(\/{{literal}})*'
  resource_location: '(\#?)({{literal}})(\:)([a-z0-9_\.\-\/]+)'
  # range: '({{number}})?(\.\.)({{number}})?'
  range: '(\-?\d*\.?\d+)?(\.\.)(\-?\d*\.?\d+)?'
  # coordinate: '([\~\^])+({{number}})?'
  coordinate: '([\~\^])(\-?\d*\.?\d+)?'
  base_selector: '\@[a-z]'
  selector_key: '(\,?\s*)({{literal}})(\=)(\!?)'

patterns:
  - include: "#comment"
  - include: "#command"

repository:
  comment:
    patterns:
      - name: comment.number-sign.mcfunction
        begin: '^\s*#'
        end: "$"

  command:
    patterns:
      - name: meta.command.mcfunction
        begin: '^\s*({{literal}})'
        end: "$"
        contentName: invalid
        beginCaptures:
          # highlight the first command on each line
          1:
            name: keyword.control.mcfunction
        patterns:
          - include: "#tokens"

  tokens:
    patterns:
      - include: "#token.selector_without_arguments"
      - include: "#token.selector_with_arguments"
      - include: "#token.resource_location"
      - include: "#token.range"
      - include: "#token.number"
      - include: "#token.relative_coordinate"
      - include: "#token.local_coordinate"
      - include: "#token.literal"

  token.selector_without_arguments:
    patterns:
      - name: variable.language.mcfunction
        match: "{{token_l}}{{base_selector}}{{token_r}}"

  # processing this separately makes things much more manageable
  token.selector_with_arguments:
    patterns:
      - name: variable.language.mcfunction
        begin: '{{token_l}}{{base_selector}}(\[)'
        end: '(\]){{token_r}}'
        contentName: invalid
        beginCaptures:
          1:
            name: keyword.control.mcfunction
        endCaptures:
          1:
            name: keyword.control.mcfunction
        patterns:
          - include: "#selector_arguments"

  token.resource_location:
    patterns:
      - name: meta.token.resource_location.mcfunction
        match: "{{token_l}}({{resource_location}}){{token_r}}"
        captures:
          1:
            patterns:
              - include: "#resource_location"

  token.range:
    patterns:
      - name: meta.token.range.mcfunction
        match: "{{token_l}}({{range}}){{token_r}}"
        captures:
          1:
            patterns:
              - include: "#range"

  token.number:
    patterns:
      - name: meta.token.number.mcfunction
        match: "{{token_l}}({{number}}){{token_r}}"
        captures:
          1:
            patterns:
              - include: "#number"

  token.coordinate:
    patterns:
      - name: meta.token.coordinate.mcfunction
        match: "{{token_l}}({{coordinate}}){{token_r}}"
        captures:
          1:
            patterns:
              - include: "#coordinate"

  selector_arguments:
    patterns:
      - include: "#selector_argument.range"
      - include: "#selector_argument.number"
      - include: "#selector_argument.resource_location"
      - include: "#selector_argument.literal"

  selector.argument_key:
    patterns:
      - name: meta.selector.argument_key.mcfunction
        match: "{{selector_key}}"
        captures:
          1:
            # the preceding `,` (if any) and the whitespace between
            name: keyword.control.mcfunction
          2:
            # the actual argument key
            name: variable.parameter.mcfunction
          3:
            # the `=`
            name: keyword.control.mcfunction
          4:
            # optional negation operator `!` (if any)
            # name: keyword.control.mcfunction
            name: string.regexp.mcfunction

  selector_argument.range:
    patterns:
      - name: meta.selector_argument.range.mcfunction
        match: "({{selector_key}})({{range}})"
        captures:
          1:
            patterns:
              - include: "#selector.argument_key"
          6:
            patterns:
              - include: "#range"

  selector_argument.number:
    patterns:
      - name: meta.selector_argument.number.mcfunction
        match: "({{selector_key}})({{number}})"
        captures:
          1:
            patterns:
              - include: "#selector.argument_key"
          6:
            patterns:
              - include: "#number"

  selector_argument.resource_location:
    patterns:
      - name: meta.selector_argument.resource_location.mcfunction
        match: "({{selector_key}})({{resource_location}})"
        captures:
          1:
            patterns:
              - include: "#selector.argument_key"
          6:
            patterns:
              - include: "#resource_location"

  selector_argument.literal:
    patterns:
      - name: meta.selector_argument.literal.mcfunction
        match: "({{selector_key}})({{literal}})"
        captures:
          1:
            patterns:
              - include: "#selector.argument_key"
          6:
            patterns:
              - include: "#literal"

  range:
    patterns:
      - name: constant.numeric.mcfunction
        match: "{{range}}"
        captures:
          2:
            # color the `..` differently to distinguish it from decimals
            # name: keyword.control.mcfunction
            name: string.regexp.mcfunction

  number:
    patterns:
      - name: constant.numeric.mcfunction
        match: "{{number}}"

  coordinate:
    patterns:
      - name: constant.numeric.mcfunction
        match: "{{coordinate}}"
        captures:
          1:
            # the `~` or `^`
            name: keyword.control.mcfunction

  resource_location:
    patterns:
      - name: entity.name.type.mcfunction
        match: "{{resource_location}}"

  literal:
    patterns:
      - name: keyword.operator.mcfunction
        match: "{{literal}}"
