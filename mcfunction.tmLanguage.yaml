---
name: mcfunction
scopeName: source.mcfunction
fileTypes:
  - mcfunction

variables:
  command_token_l: (?<= )
  command_token_r: (?=[ \n])

  # characters for literal subcommands and other word-like identifiers
  literal: "([a-z_][a-z0-9_]*)"

  # characters permitted in namespaces, resource paths, etc
  component_nc: '[a-z0-9_\.\-]+'
  component: "({{component_nc}})"

  # an integer or decimal with optional leading digit
  number: '(\-?\d*\.?\d+)'

  # a resource path is the portion of the resource location following the namesapce
  resource_path: '([a-z0-9_\.\-\/]+)'

  # resource locations: namespace + path
  # TODO improve resource location validity
  # resource_location: '{{component}}(\:)({{component_nc}}(?:\/{{component_nc}})*)'
  resource_location: '{{component}}(\:){{resource_path}}'

  # a tagged resource location is a resource location prefaced with `#`
  tagged_resource_location: '(\#){{resource_location}}'

  # relative or local coordinate
  coordinate: '([\~\^]){{number}}?'

  # numeric range
  range: '{{number}}?(\.\.){{number}}?'

  # base selectors are defined with a single, lower-case character
  base_selector: '(\@[a-z])'

  # group names, in one place
  name.numeric_constant: constant.numeric.mcfunction
  name.numeric_altered: constant.character.escape.mcfunction
  name.range_ellipsis: keyword.control.mcfunction
  name.coordinate_operator: keyword.control.mcfunction
  name.base_selector: variable.language.mcfunction
  name.resource_location: entity.name.function.mcfunction
  name.tagged_resource_location: constant.character.escape.mcfunction
  name.literal: keyword.operator.mcfunction
  name.unknown: invalid.illegal.mcfunction
  name.error: invalid.illegal.mcfunction

patterns:
  - include: "#comment"
  - include: "#command"
  - include: "#unknown"

capturesRepository:
  selector_without_arguments:
    1:
      name: "{{name.base_selector}}"

  resource_location:
    1:
      # the namespace
      name: "{{name.resource_location}}"
    2:
      # the `:`
      name: "{{name.resource_location}}"
    3:
      # the path
      name: "{{name.resource_location}}"

  tagged_resource_location:
    1:
      # the `#`
      name: "{{name.tagged_resource_location}}"
    2:
      # the namespace
      name: "{{name.tagged_resource_location}}"
    3:
      # the `:`
      name: "{{name.tagged_resource_location}}"
    4:
      # the path
      name: "{{name.tagged_resource_location}}"

  range:
    1:
      # the number on the left side
      name: "{{name.numeric_altered}}"
    2:
      # color the `..` differently to distinguish it from decimals
      name: "{{name.range_ellipsis}}"
    3:
      # the number on the right side
      name: "{{name.numeric_altered}}"

  number:
    1:
      name: "{{name.numeric_constant}}"

  coordinate:
    1:
      # the `~` or `^`
      name: "{{name.coordinate_operator}}"
    2:
      # the actual number
      name: "{{name.numeric_altered}}"

  literal:
    1:
      name: "{{name.literal}}"

repository:
  comment:
    patterns:
      - name: meta.comment.mcfunction
        match: '^\s*(#.*)$'
        captures:
          1:
            name: comment.number-sign.mcfunction
            patterns:
              # things that need attention, like todos and fixmes
              - name: meta.comment.todo.mcfunction
                match: '#\s*((?:TODO|FIXME|DELETEME)\s.*)$'
                captures:
                  1:
                    name: markup.bold.mcfunction
              # doc tags like `@params` and `@returns`
              - name: meta.comment.annotation.mcfunction
                match: '#\s*(\@\w*)\s.*$'
                captures:
                  1:
                    name: markup.bold.mcfunction
              # headers for separating blocks
              - name: meta.comment.annotation.mcfunction
                match: '##\s*(.*)$'
                captures:
                  1:
                    name: markup.heading.mcfunction

  command:
    patterns:
      - name: meta.command.mcfunction
        begin: '^\s*{{literal}}[ \n]'
        end: "$"
        beginCaptures:
          # highlight the first command on each line
          1:
            name: keyword.control.mcfunction
        patterns:
          # don't name this one yet, we want to get rid of the space
          - begin: "(?<= )"
            # consume the space
            # end: '[ \n]'

            # for debugging purposes...
            end: '([ \n])'
            endCaptures:
              1:
                name: markup.underline.debug.mcfunction

            # name everything inside as part of the token
            contentName: meta.command.token.mcfunction
            patterns:
              - include: "#command.tokens"

  unknown:
    patterns:
      - name: meta.unknown.mcfunction
        match: "^(.*)$"
        captures:
          1:
            name: "{{name.unknown}}"

  command.tokens:
    patterns:
      # TODO re-implement selectors with arguments
      # - include: "#command.token.selector_with_arguments"
      - include: "#command.token.selector_without_arguments"
      - include: "#command.token.resource_location"
      - include: "#command.token.tagged_resource_location"
      - include: "#command.token.range"
      - include: "#command.token.number"
      - include: "#command.token.coordinate"
      - include: "#command.token.literal"
      - include: "#command.token.unknown"

  command.token.selector_without_arguments:
    name: meta.command.token.selector_without_arguments.mcfunction
    match: "{{command_token_l}}{{base_selector}}{{command_token_r}}"
    captures: "#selector_without_arguments"

  command.token.resource_location:
    name: meta.command.token.resource_location.mcfunction
    match: "{{command_token_l}}{{resource_location}}{{command_token_r}}"
    captures: "#resource_location"

  command.token.tagged_resource_location:
    name: meta.command.token.tagged_resource_location.mcfunction
    match: "{{command_token_l}}{{tagged_resource_location}}{{command_token_r}}"
    captures: "#tagged_resource_location"

  command.token.range:
    name: meta.command.token.range.mcfunction
    # TODO catch `..` error case
    match: "{{command_token_l}}{{range}}{{command_token_r}}"
    captures: "#range"

  command.token.number:
    name: meta.command.token.number.mcfunction
    match: "{{command_token_l}}{{number}}{{command_token_r}}"
    captures: "#number"

  command.token.coordinate:
    name: meta.command.token.coordinate.mcfunction
    match: "{{command_token_l}}{{coordinate}}{{command_token_r}}"
    captures: "#coordinate"

  command.token.literal:
    name: meta.command.token.literal.mcfunction
    match: "{{command_token_l}}{{literal}}{{command_token_r}}"
    captures: "#literal"

  command.token.unknown:
    name: meta.command.token.unknown.mcfunction
    match: '{{command_token_l}}([^ \n]*){{command_token_r}}'
    captures:
      1:
        name: "{{name.unknown}}"
