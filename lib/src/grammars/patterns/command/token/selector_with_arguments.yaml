name: meta.command.token.selector_with_arguments.mcfunction

# Begin whenever we see a base selector followed by an opening square brace.
begin: '{{command_token_l}}{{base_selector}}(\[)'

# Similar to quotes, we have two distinct ending cases.
#   1. End on a newline, without consuming it. This is technically an error
#      case, but will occur frequently with unfinished selectors; e.g. while
#      the user is typing a selector at the end of a line.
#   2. End on any other character, although according to the child scope it
#      should only ever be a closing square brace. The child scope does not
#      consume the closing brace, and so it becomes our job to check for
#      erroneous trailing data and to advance the next token.
end: '{{lookahead_newline}}|(\])({{not_command_token_delim}}*)'

beginCaptures:
  1:
    name: "#base_selector"
  2:
    name: "#selector_delims"

endCaptures:
  1:
    name: "#selector_delims"
  2:
    name: "#error"

patterns:
  # consume whitespace in between arguments
  - name: meta.selector.argument_spacing.mcfunction
    match: " +"
  # now the fun part: recurse yet again whenever we encounter an argument
  - name: meta.selector.argument.mcfunction

    # Begin as soon as we see a key, equals, and optional negation operator.
    begin: '{{maybe_quoted_key}} *(\=) *(\!)? *'

    # End in three distinct cases:
    #   1. Comma followed immediately by a terminal. Consume the comma, but
    #      not the terminal. This is an error case.
    #   2. Just a comma. This is the expected case and we can proceed fine.
    #   3. just a terminal. Also an error case.
    end: '( *\,)(?=[\]\n])|( *\,)|(?= *[\]\n])'

    beginCaptures:
      1:
        # the key
        name: "#argument_key"
      2:
        # the `=`
        name: "#selector_delims"
      3:
        # the optional `!`
        name: "keyword.control.mcfunction"

    endCaptures:
      1:
        # the `,` in invalid case (1)
        name: "#error"
      2:
        # the `,` in valid case (2)
        name: "#selector_delims"

    patterns:
      - include: "#selector.argument.resource_location"
      - include: "#selector.argument.tagged_resource_location"
      - include: "#selector.argument.range"
      - include: "#selector.argument.number"
      - include: "#selector.argument.boolean"
      - include: "#selector.argument.property_map"
      - include: "#selector.argument.nbt_compound"
      - include: "#selector.argument.quoted_string"
      - include: "#selector.argument.single_quoted_string"
      - include: "#selector.argument.unquoted_string"
      - include: "#selector.argument.unknown"

  # anything else apart from terminals is classified as an error
  - name: "#error"
    match: '[^\]\n]+'
