---
name: mcfunction
scopeName: source.mcfunction
fileTypes:
  - mcfunction

names:
  brace_delims: variable.language.mcfunction
  argument_key: variable.other.mcfunction
  numeric_constant: constant.numeric.mcfunction
  numeric_altered: constant.numeric.mcfunction
  range_ellipsis: keyword.control.mcfunction
  coordinate_operator: "#numeric_altered"
  base_selector: support.class.mcfunction
  selector_delims: "#base_selector"
  block_predicate_delims: "#brace_delims"
  nbt_delims: "#brace_delims"
  nbt_key: string.interpolated.mcfunction
  nbt_index: constant.numeric.mcfunction
  resource_namespace: entity.name.function.mcfunction
  resource_path: "#resource_namespace"
  tagged_resource_namespace: "#resource_namespace"
  tagged_resource_path: "#tagged_resource_namespace"
  namespace_separator: "#resource_namespace"
  scoreboard_objective: "#resource_namespace"
  uuid: "#base_selector"
  fakeplayer: "#base_selector"
  boolean: "#numeric_constant"
  operation: "#numeric_constant"
  literal: entity.name.mcfunction
  unquoted_string: string.unquoted.mcfunction
  quoted_string: string.quoted.mcfunction
  quoted_string_escape: constant.character.escape.mcfunction
  root_redirect: "#literal"
  greedy_parent: "#literal"
  top_level_command: keyword.control.mcfunction
  unknown: invalid.illegal.mcfunction
  error: invalid.illegal.mcfunction
  block_comment: comment.block.mcfunction
  block_comment_symbol: markup.list.mcfunction
  block_comment_prefix: markup.list.mcfunction
  block_comment_heading_1: markup.bold.mcfunction
  block_comment_heading_2: markup.list.mcfunction
  block_comment_annotation_label: markup.heading.mcfunction
  block_comment_annotation_text: comment.block.mcfunction

variables:
  lookahead_newline: '(?=\n)'

  command_token_delim: '[ \n]'
  not_command_token_delim: '[^ \n]'

  command_token_l: "(?<= )"
  command_token_r: '(?=[ \n]|$)'

  selector_argument_terminal: '(?= *[\,\]\n])'
  sat: "{{selector_argument_terminal}}"

  block_predicate_argument_terminal: "{{sat}}"
  bpat: "{{block_predicate_argument_terminal}}"

  # boolean true/false
  boolean: "(true|false)"

  # math/numeric operations
  operation: '(\%\=|\*\=|\+\=|\-\=|\/\=|\<|\=|\>|\>\<|\<\=|\>\=)'

  # commands like `execute ... run` that redirect to the root node
  root_redirect: "(run)"

  # commands like `say` that consume the rest of the line
  greedy_parent: "((?<=^say | say ))"

  # characters for literal subcommands and other strict word-like identifiers
  literal: "([a-z_][a-z0-9_]*)"

  # case-insensitive literal or quoted strings (with limited support)
  maybe_quoted_key: "((?:[a-z_][a-z0-9_]*)|(?:\"[^\"\n]*\")|(?:\\'[^\\'\n]*\\'))"

  # characters permitted in unquoted string words, like nbt compound keys
  unquoted_word_nc: '[A-Za-z0-9_\.\-]+'
  unquoted_word: "({{unquoted_word_nc}})"

  # characters permitted in namespaces, resource paths, etc
  component_nc: '[a-z0-9_\.\-]+'
  component: "({{component_nc}})"

  # an integer or decimal with optional leading digit
  number: '(\-?\d*\.?\d+)'
  integer: '(\-?\d+)'

  # a resource path is the portion of the resource location following the namespace
  resource_path_nc: '[a-z0-9_\.\-\/]+'
  resource_path: "({{resource_path_nc}})"

  # resource locations: namespace + path
  resource_location_nc: '{{component_nc}}\:{{resource_path_nc}}'
  resource_location: '{{component}}(\:){{resource_path}}'

  # uuid format
  hex_digit: "[0-9a-fA-F]"
  uuid: "({{hex_digit}}+(?:(-){{hex_digit}}+){4})"

  # scorebord objective names
  scoreboard_objective: "{{unquoted_word}}"

  # unquoted strings are like literals with additional available characters
  # basically anything is accepted apart from whitespace
  # character ambiguity depends on context
  unquoted_string_nc: '\S+'
  unquoted_string: "({{unquoted_string_nc}})"
  nbt_unquoted_string: '([^\s\{\}\[\]\,\:\=]+)'
  selector_unquoted_string: '([^\s\{\}\[\]\,\:\=\!]+)'

  # various popular fakeplayer formats
  # they'd get classified as unquoted strings anyway
  fakeplayer: '([\#\$\%]{{unquoted_string_nc}})'

  # a tagged resource location is a resource location prefaced with `#`
  tagged_resource_location: '(\#){{resource_location}}'

  # relative or local coordinate
  coordinate: '([\~\^]){{number}}?'

  # numeric range
  range: '{{number}}?(\.\.){{number}}?'

  # base selectors are defined with a single, lower-case character
  base_selector: '(\@[a-z])'

  # prefix following the `#` to initiate a block comment section
  block_comment_prefix: ">"

patterns:
  - include: "#comment"
  - include: "#command"
  - include: "#unknown"

capturesRepository:
  selector_without_arguments:
    1:
      name: "#base_selector"

  resource_path:
    1:
      name: "#resource_path"

  resource_location:
    1:
      # the namespace
      name: "#resource_namespace"
    2:
      # the `:`
      name: "#namespace_separator"
    3:
      # the path
      name: "#resource_path"

  tagged_resource_location:
    1:
      # the `#`
      name: "#tagged_resource_namespace"
    2:
      # the namespace
      name: "#tagged_resource_namespace"
    3:
      # the `:`
      name: "#namespace_separator"
    4:
      # the path
      name: "#tagged_resource_path"

  range:
    1:
      # the number on the left side
      name: "#numeric_altered"
    2:
      # color the `..` differently to distinguish it from decimals
      name: "#range_ellipsis"
    3:
      # the number on the right side
      name: "#numeric_altered"

  number:
    1:
      name: "#numeric_constant"

  integer:
    1:
      name: "#numeric_constant"

  coordinate:
    1:
      # the `~` or `^`
      name: "#coordinate_operator"
    2:
      # the actual number
      name: "#numeric_altered"

  boolean:
    1:
      name: "#boolean"

  operation:
    1:
      name: "#operation"

  root_redirect:
    1:
      name: "#root_redirect"
    2:
      name: "#top_level_command"

  greedy_parent:
    1:
      name: "#literal"
    2:
      name: "#quoted_string"

  literal:
    1:
      name: "#literal"

  uuid:
    1:
      name: "#uuid"

  fakeplayer:
    1:
      name: "#fakeplayer"

  unquoted_string:
    1:
      name: "#unquoted_string"

repository:
  comment:
    patterns:
      # enter into block comments via alternate comment style
      - name: meta.comment.block.mcfunction

        # must begin with unique prefix
        begin: '^[ \t]*((#)({{block_comment_prefix}})((.*)))$'

        # end on any line that is not a comment, without consuming anything
        # should only get here when an adjacent comment was not found
        # this allows the inner block comment loop to run-off
        end: '^(?![ \t]*#)'

        beginCaptures:
          1:
            name: "#block_comment"
          2:
            name: "#block_comment_symbol"
          3:
            name: "#block_comment_prefix"
          4:
            name: "#block_comment_heading_1"
          5:
            name: "#block_comment_heading_2"

        patterns:
          - include: "#comment.block"

      # any other type of comment gets caught here
      - name: meta.comment.line.mcfunction
        match: '^[ \t]*(#.*)$'
        captures:
          1:
            name: comment.line.mcfunction

  comment.block:
    patterns:
      # match any type of comment attached to the block
      - name: meta.comment.block_line.mcfunction
        begin: '^[ \t]*((#)[ \t]*)'
        end: "$"
        beginCaptures:
          1:
            name: "#block_comment"
          2:
            name: "#block_comment_symbol"
        patterns:
          - include: "#comment.block.line"

      # otherwise, break from the block loop

  comment.block.line:
    patterns:
      # doc tags like `@params` and `@returns`
      - name: meta.comment.block.annotation.mcfunction
        match: '((\@\w*)\b(.*))$'
        captures:
          1:
            name: "#block_comment"
          2:
            name: "#block_comment_annotation_label"
          3:
            name: "#block_comment_annotation_text"

      # block headers within blocks
      - name: meta.comment.block.heading.mcfunction
        match: "(({{block_comment_prefix}})((.*)))$"
        captures:
          1:
            name: "#block_comment"
          2:
            name: "#block_comment_prefix"
          3:
            name: "#block_comment_heading_1"
          4:
            name: "#block_comment_heading_2"

      # otherwise its just a comment
      - name: meta.comment.block.text.mcfunction
        match: "(.*)$"
        captures:
          1:
            name: "#block_comment"

  command:
    patterns:
      - name: meta.command.mcfunction
        begin: '^\s*{{literal}}[ \n]'
        end: "$"
        beginCaptures:
          # highlight the first command on each line
          1:
            name: "#top_level_command"
        patterns:
          # don't name this one yet, we want to get rid of the space
          - begin: "(?<= )"
            # consume the space
            end: '[ \n]'
            # name everything inside as part of the token
            contentName: meta.command.token.mcfunction
            patterns:
              - include: "#command.tokens"

  unknown:
    patterns:
      - name: meta.unknown.mcfunction
        match: "^(.*)$"
        captures:
          1:
            name: "#unknown"

  command.tokens:
    patterns:
      - include: "#command.token.nbt_compound"
      - include: "#command.token.nbt_list"
      - include: "#command.token.selector_with_arguments"
      - include: "#command.token.selector_without_arguments"
      - include: "#command.token.block_predicate"
      - include: "#command.token.block_predicate_without_namespace"
      - include: "#command.token.resource_location"
      - include: "#command.token.tagged_resource_location"
      - include: "#command.token.range"
      - include: "#command.token.number"
      - include: "#command.token.coordinate"
      - include: "#command.token.boolean"
      - include: "#command.token.operation"
      - include: "#command.token.root_redirect"
      - include: "#command.token.greedy_parent"
      - include: "#command.token.literal"
      - include: "#command.token.uuid"
      - include: "#command.token.fakeplayer"
      - include: "#command.token.nbt_path"
      - include: "#command.token.quoted_string"
      - include: "#command.token.single_quoted_string"
      - include: "#command.token.unquoted_string"
      - include: "#command.token.unknown"

  command.token.selector_without_arguments:
    name: meta.command.token.selector_without_arguments.mcfunction
    match: "{{command_token_l}}{{base_selector}}{{command_token_r}}"
    captures: "#selector_without_arguments"

  command.token.resource_location:
    name: meta.command.token.resource_location.mcfunction
    match: "{{command_token_l}}{{resource_location}}{{command_token_r}}"
    captures: "#resource_location"

  command.token.tagged_resource_location:
    name: meta.command.token.tagged_resource_location.mcfunction
    match: "{{command_token_l}}{{tagged_resource_location}}{{command_token_r}}"
    captures: "#tagged_resource_location"

  command.token.range:
    name: meta.command.token.range.mcfunction
    match: "{{command_token_l}}{{range}}{{command_token_r}}"
    captures: "#range"

  command.token.number:
    name: meta.command.token.number.mcfunction
    match: "{{command_token_l}}{{number}}{{command_token_r}}"
    captures: "#number"

  command.token.coordinate:
    name: meta.command.token.coordinate.mcfunction
    match: "{{command_token_l}}{{coordinate}}{{command_token_r}}"
    captures: "#coordinate"

  command.token.boolean:
    name: meta.command.token.boolean.mcfunction
    match: "{{command_token_l}}{{boolean}}{{command_token_r}}"
    captures: "#boolean"

  command.token.operation:
    name: meta.command.token.operation.mcfunction
    match: "{{command_token_l}}{{operation}}{{command_token_r}}"
    captures: "#operation"

  command.token.literal:
    name: meta.command.token.literal.mcfunction
    match: "{{command_token_l}}{{literal}}{{command_token_r}}"
    captures: "#literal"

  command.token.uuid:
    name: meta.command.token.uuid.mcfunction
    match: "{{command_token_l}}{{uuid}}{{command_token_r}}"
    captures: "#uuid"

  command.token.fakeplayer:
    name: meta.command.token.fakeplayer.mcfunction
    match: "{{command_token_l}}{{fakeplayer}}{{command_token_r}}"
    captures: "#fakeplayer"

  command.token.unquoted_string:
    name: meta.command.token.unquoted_string.mcfunction
    match: "{{command_token_l}}{{unquoted_string}}{{command_token_r}}"
    captures: "#unquoted_string"

  command.token.unknown:
    name: meta.command.token.unknown.mcfunction
    match: '{{command_token_l}}([^ \n]*){{command_token_r}}'
    captures:
      1:
        name: "#unknown"

  command.token.root_redirect:
    # Special case for commands like `execute ... run` that redirect to the
    # root command. We use this to highlight the top-level command despite it
    # not being on its own line.
    name: meta.command.token.root_redirect.mcfunction
    match: "{{command_token_l}}{{root_redirect}} {{literal}}?{{command_token_r}}"
    captures: "#root_redirect"

  command.token.greedy_parent:
    # Special case for commands like `say` that consume the rest of the line.
    name: meta.command.token.greedy_parent.mcfunction
    match: "{{greedy_parent}}(.*)$"
    captures: "#greedy_parent"

  command.token.nbt_compound:
    name: meta.command.token.nbt_compound.mcfunction
    begin: '{{command_token_l}}(\{)'
    end: '{{lookahead_newline}}|(\})({{not_command_token_delim}}*)'
    beginCaptures:
      1:
        name: "#nbt_delims"
    endCaptures:
      1:
        name: "#nbt_delims"
      2:
        name: "#error"
    patterns:
      - include: "#nbt.compound"

  command.token.nbt_list:
    name: meta.command.token.nbt_list.mcfunction
    begin: '{{command_token_l}}(\[)'
    end: '{{lookahead_newline}}|(\])({{not_command_token_delim}}*)'
    beginCaptures:
      1:
        name: "#nbt_delims"
    endCaptures:
      1:
        name: "#nbt_delims"
      2:
        name: "#error"
    patterns:
      - include: "#nbt.list"

  nbt.compound:
    patterns:
      # skip whitespace: {( )SelectedItem : { Count : 64 } }
      - match: " +"

      # quoted keys: { ("text") (:) "hello" }
      # unquoted keys: { (SelectedItem) (:) { Count: 64 } }
      - begin: '(,)? *({{unquoted_word_nc}}|\"[^\n\"]+\") *(\:) *'

        # Possible ending cases:
        #   1. the closing brace of the parent compound
        #   2. the comma separating the next element
        #   3. newline (error case)
        end: ' *(?=[\n\}\,])'

        beginCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#nbt_key"
          3:
            name: "#nbt_delims"

        patterns:
          - include: "#nbt.value"

      # anything else apart from separators and terminals is an error
      - match: '[^\n\}\,]+'
        name: "#error"

  nbt.list:
    patterns:
      # skip whitespace: [( )1 , 2 , 3]
      - match: " +"

      # values: [ 1 (,) (2) , 3]
      # begin on anything that is not a terminal or separator
      - begin: '(,)? *(?=[^\n\]\,])'

        # Possible ending cases:
        #   1. the closing brace of the parent compound
        #   2. the comma separating the next element
        #   3. newline (error case)
        end: ' *(?=[\n\]\,])'

        beginCaptures:
          1:
            name: "#nbt_delims"

        patterns:
          - include: "#nbt.value"

      - match: '[^\n\]\,]+'
        name: "#error"

  nbt.value:
    patterns:
      - begin: '(\{)'
        end: '{{lookahead_newline}}|(\})'
        beginCaptures:
          1:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
        patterns:
          - include: "#nbt.compound"
      - begin: '(\[)'
        end: '{{lookahead_newline}}|(\])'
        beginCaptures:
          1:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
        patterns:
          - include: "#nbt.list"
      - begin: '(\")'
        end: '{{lookahead_newline}}|(\")'
        beginCaptures:
          1:
            name: "#quoted_string"
        endCaptures:
          1:
            name: "#quoted_string"
        patterns:
          - include: "#common.quoted_string"
      - begin: "(\\')"
        end: "{{lookahead_newline}}|(\\')"
        beginCaptures:
          1:
            name: "#quoted_string"
        endCaptures:
          1:
            name: "#quoted_string"
        patterns:
          - include: "#common.single_quoted_string"
      - match: "{{boolean}}"
        name: "#boolean"
      - match: "{{number}}"
        name: "#numeric_constant"
      - match: "{{nbt_unquoted_string}}"
        name: "#unquoted_string"
      - match: '[^\n\,\]\}]+'
        name: "#error"

  command.token.quoted_string:
    # quoted strings are a recursive format captured between the quotes
    name: meta.command.token.quoted_string.mcfunction

    # begin whenever we see a quote
    begin: '{{command_token_l}}(\")'

    # End on anything. This is tricky. If we got to this point, it means the
    # child scope has been terminated. According to the child scope, the only
    # things that can get us here are an unescaped quote or a newline (which
    # cannot be escaped). Also make sure to mark anything following an ending
    # quote to the next token delimiter as an error.
    end: '{{lookahead_newline}}|(\")({{not_command_token_delim}}*)'

    beginCaptures:
      1:
        name: "#quoted_string"

    endCaptures:
      1:
        name: "#quoted_string"
      2:
        name: "#error"

    patterns:
      - include: "#common.quoted_string"

  command.token.single_quoted_string:
    name: meta.command.token.single_quoted_string.mcfunction
    begin: "{{command_token_l}}(\\')"
    end: "{{lookahead_newline}}|(\\')({{not_command_token_delim}}*)"
    beginCaptures:
      1:
        name: "#quoted_string"
    endCaptures:
      1:
        name: "#quoted_string"
      2:
        name: "#error"
    patterns:
      - include: "#common.single_quoted_string"

  command.token.block_predicate:
    # This whole thing is going to look a lot like selector arguments.

    name: meta.command.token.block_predicate.mcfunction

    # Begin whenever we see a resource location followed by an opening bracket.
    begin: '{{command_token_l}}(?=(\#)?{{resource_location}}(\[|\{))'

    # Similar to selector arguments; end in several cases.
    end: '{{lookahead_newline}}|(?:(?<=\])(?!\{)|(?<=\}))({{not_command_token_delim}}*)'

    endCaptures:
      1:
        name: "#error"

    patterns:
      - include: "#block_predicate"

  command.token.block_predicate_without_namespace:
    name: meta.command.token.block_predicate_without_namespace.mcfunction

    # We need to be careful here about not selecting an NBT path. We do this
    # by using look-ahead to check for a block state property immediately
    # inside the braces. Note that we can only disambiguate when a block state
    # mapping is present, otherwise we can't differentiate from an NBT path.
    begin: '{{command_token_l}}(?=(\#)?{{resource_path}}(\[ *{{literal}} *\=))'

    end: '{{lookahead_newline}}|(?:(?<=\])(?!\{)|(?<=\}))({{not_command_token_delim}}*)'

    endCaptures:
      1:
        name: "#error"

    patterns:
      - include: "#block_predicate"

  command.token.selector_with_arguments:
    name: meta.command.token.selector_with_arguments.mcfunction

    # Begin whenever we see a base selector followed by an opening square brace.
    begin: '{{command_token_l}}{{base_selector}}(\[)'

    # Similar to quotes, we have two distinct ending cases.
    #   1. End on a newline, without consuming it. This is technically an error
    #      case, but will occur frequently with unfinished selectors; e.g. while
    #      the user is typing a selector at the end of a line.
    #   2. End on any other character, although according to the child scope it
    #      should only ever be a closing square brace. The child scope does not
    #      consume the closing brace, and so it becomes our job to check for
    #      erroneous trailing data and to advance the next token.
    end: '{{lookahead_newline}}|(\])({{not_command_token_delim}}*)'

    beginCaptures:
      1:
        name: "#base_selector"
      2:
        name: "#selector_delims"

    endCaptures:
      1:
        name: "#selector_delims"
      2:
        name: "#error"

    patterns:
      # consume whitespace in between arguments
      - name: meta.selector.argument_spacing.mcfunction
        match: " +"
      # now the fun part: recurse yet again whenever we encounter an argument
      - name: meta.selector.argument.mcfunction

        # Begin as soon as we see a key, equals, and optional negation operator.
        begin: '{{maybe_quoted_key}} *(\=) *(\!)? *'

        # End in three distinct cases:
        #   1. Comma followed immediately by a terminal. Consume the comma, but
        #      not the terminal. This is an error case.
        #   2. Just a comma. This is the expected case and we can proceed fine.
        #   3. just a terminal. Also an error case.
        end: '( *\,)(?=[\]\n])|( *\,)|(?= *[\]\n])'

        beginCaptures:
          1:
            # the key
            name: "#argument_key"
          2:
            # the `=`
            name: "#selector_delims"
          3:
            # the optional `!`
            name: "keyword.control.mcfunction"

        endCaptures:
          1:
            # the `,` in invalid case (1)
            name: "#error"
          2:
            # the `,` in valid case (2)
            name: "#selector_delims"

        patterns:
          - include: "#selector.argument.resource_location"
          - include: "#selector.argument.tagged_resource_location"
          - include: "#selector.argument.range"
          - include: "#selector.argument.number"
          - include: "#selector.argument.boolean"
          - include: "#selector.argument.property_map"
          - include: "#selector.argument.nbt_compound"
          - include: "#selector.argument.quoted_string"
          - include: "#selector.argument.single_quoted_string"
          - include: "#selector.argument.unquoted_string"
          - include: "#selector.argument.unknown"

      # anything else apart from terminals is classified as an error
      - name: "#error"
        match: '[^\]\n]+'

  command.token.nbt_path:
    name: meta.command.token.nbt_path.mcfunction

    # This one is tricky, because we won't know when to start recursing.
    # There's also a lot of overlap with other token types, like strings.
    # So what we're going to do is require at least one character familiar to
    # NBT paths, like dots or opening braces, immediately following a word.
    # We use lookahead here so that we can process the syntax more accurately
    # after we're more confident that the token is an NBT path.
    begin: '{{command_token_l}}(?=\w+[\.\[\{])'

    # It's impossible to know what an NBT path will end on, so apart from being
    # careful about newlines like usual we just accept anything.
    # end: '{{lookahead_newline}}|({{not_command_token_delim}}*)'
    end: "{{command_token_r}}"

    patterns:
      - include: "#nbt_path.property"

  nbt_path.property:
    patterns:
      # (Inventory)([){Count: 64}(])
      - begin: '(\.)?(\w+)?(\[)'
        end: '(\])|(?=\n)'
        beginCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#nbt_key"
          3:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
        patterns:
          - include: "#nbt_path.index"
      # Inventory[].(tag)({)custom: true(}).display.Name
      - begin: '(\.)?(\w+)(\{)'
        end: '(\})|(?=\n)'
        beginCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#nbt_key"
          3:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
        patterns:
          - include: "#nbt.compound"
      # SelectedItem.tag(."my quoted key")
      - begin: '(\")'
        # Anything other than a dot, space, or newline immediately following the quote is invalid.
        end: '{{lookahead_newline}}|(\")([^\. \n]*)'
        beginCaptures:
          1:
            name: "#quoted_string"
        endCaptures:
          1:
            name: "#quoted_string"
          2:
            name: "#error"
        patterns:
          - include: "#common.quoted_string"
      # SelectedItem(.Count)
      - match: '(\.)?(\w+)'
        captures:
          1:
            name: "#nbt_delims"
          2:
            name: "#nbt_key"
      # (error) look-ahead double dot
      - match: '(\.)(?=\.)'
        captures:
          1:
            name: "#error"
      # anything else between dots is an error
      # make sure to break before newlines
      - match: '[^\.\s]+'
        name: "#error"

  nbt_path.index:
    patterns:
      - match: '(?<=\[){{integer}}(?=\])'
        captures: "#integer"
      - begin: '(\{)'
        end: '{{lookahead_newline}}|(\})([^\]\,\n]*)'
        beginCaptures:
          1:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#error"
        patterns:
          - include: "#nbt.compound"
      - match: '[^\n\]]+'
        name: "#error"

  block_predicate:
    patterns:
      - match: "{{tagged_resource_location}}"
        captures: "#tagged_resource_location"
      - match: "{{resource_location}}"
        captures: "#resource_location"
      - match: "{{resource_path}}"
        captures: "#resource_path"
      - begin: '(\[)'
        end: '(\])'
        beginCaptures:
          1:
            name: "#block_predicate_delims"
        endCaptures:
          1:
            name: "#block_predicate_delims"
        patterns:
          - include: "#block_predicate.arguments"
      - begin: '(\{)'
        end: '(\})'
        beginCaptures:
          1:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
        patterns:
          - include: "#nbt.compound"

  block_predicate.arguments:
    patterns:
      - name: meta.block_predicate.argument_spacing.mcfunction
        match: " +"
      - name: meta.block_predicate.argument.mcfunction
        begin: '{{literal}} *(\=) *'
        end: '(\,)(?=[\]\n])|(\,)|(?=[\]\n])'
        beginCaptures:
          1:
            name: "#argument_key"
          2:
            name: "#block_predicate_delims"
        endCaptures:
          1:
            name: "#error"
          2:
            name: "#block_predicate_delims"
        patterns:
          - include: "#block_predicate.argument.number"
          - include: "#block_predicate.argument.boolean"
          - include: "#block_predicate.argument.literal"

  block_predicate.argument.number:
    name: meta.block_predicate.argument.number.mcfunction
    match: "{{number}}{{bpat}}"
    captures: "#number"

  block_predicate.argument.boolean:
    name: meta.block_predicate.argument.boolean.mcfunction
    match: "{{boolean}}{{bpat}}"
    captures: "#boolean"

  block_predicate.argument.literal:
    name: meta.block_predicate.argument.literal.mcfunction
    match: "{{literal}}{{bpat}}"
    captures: "#literal"

  selector.argument.resource_location:
    name: meta.selector.argument.resource_location.mcfunction
    match: "{{resource_location}}{{sat}}"
    captures: "#resource_location"

  selector.argument.tagged_resource_location:
    name: meta.selector.argument.tagged_resource_location.mcfunction
    match: "{{tagged_resource_location}}{{sat}}"
    captures: "#tagged_resource_location"

  selector.argument.range:
    name: meta.selector.argument.range.mcfunction
    match: "{{range}}{{sat}}"
    captures: "#range"

  selector.argument.number:
    name: meta.selector.argument.number.mcfunction
    match: "{{number}}{{sat}}"
    captures: "#number"

  selector.argument.boolean:
    name: meta.selector.argument.boolean.mcfunction
    match: "{{boolean}}{{sat}}"
    captures: "#boolean"

  selector.argument.unquoted_string:
    name: meta.selector.argument.unquoted_string.mcfunction
    match: "{{selector_unquoted_string}}{{sat}}"
    captures: "#unquoted_string"

  selector.argument.unknown:
    name: meta.selector.argument.unknown.mcfunction
    match: '([^\]\n\,]+)'
    captures:
      1:
        name: "#unknown"

  selector.argument.quoted_string:
    name: meta.selector.argument.quoted_string.mcfunction
    begin: '(\")'
    end: '{{lookahead_newline}}|(\") *([^\]\,\n]*)'
    beginCaptures:
      1:
        name: "#quoted_string"
    endCaptures:
      1:
        name: "#quoted_string"
      2:
        # anything trailing after the quote, apart from whitespace terminals, is an error
        name: "#error"
    patterns:
      - include: "#common.quoted_string"

  selector.argument.single_quoted_string:
    name: meta.selector.argument.single_quoted_string.mcfunction
    begin: "(\\')"
    end: "{{lookahead_newline}}|(\\') *([^\\]\\,\\n]*)"
    beginCaptures:
      1:
        name: "#quoted_string"
    endCaptures:
      1:
        name: "#quoted_string"
      2:
        name: "#error"
    patterns:
      - include: "#common.single_quoted_string"

  selector.argument.property_map:
    name: meta.selector.argument.property_map.mcfunction
    # we need to try and distinguish this from an nbt argument
    # lookahead for something unique to advancements/scores
    # (how about we just copy-paste thee capturing part of the property map?)
    begin: '(\{)(?= *({{resource_location_nc}}|{{resource_path_nc}}|{{scoreboard_objective}}) *(\=))'
    end: '{{lookahead_newline}}|(\}) *([^\]\,\n]*)'
    beginCaptures:
      1:
        name: "#nbt_delims"
    endCaptures:
      1:
        name: "#nbt_delims"
      2:
        name: "#error"
    patterns:
      - include: "#property_map"

  selector.argument.nbt_compound:
    name: meta.selector.argument.nbt_compound.mcfunction
    begin: '(\{)'
    end: '{{lookahead_newline}}|(\}) *([^\]\,\n]*)'
    beginCaptures:
      1:
        name: "#nbt_delims"
    endCaptures:
      1:
        name: "#nbt_delims"
      2:
        name: "#error"
    patterns:
      - include: "#nbt.compound"

  property_map:
    # for `advancements` and `scores` in selectors
    patterns:
      # skip whitespace
      - match: " +"

      # try for things that look like scores first
      - begin: '(,)? *{{scoreboard_objective}} *(\=) *'
        end: ' *(?=[\n\}\,])'
        beginCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#scoreboard_objective"
          3:
            name: "#nbt_delims"
        patterns:
          - include: "#property_map.values"

      # then try for resource locations (advancements)
      # with namespace:    {minecraft:story/form_obsidian=true}
      # without namespace: {story/form_obsidian=true}
      - begin: '(,)? *({{resource_location_nc}}|{{resource_path_nc}}) *(\=) *'
        end: ' *(?=[\n\}\,])'
        beginCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#resource_path"
          3:
            name: "#nbt_delims"
        patterns:
          - include: "#property_map.values"

      # anything else apart from separators and terminals is an error
      - match: '[^\n\}\,]+'
        name: "#error"

  property_map.values:
    patterns:
      - match: "{{boolean}}"
        captures: "#boolean"
      - match: "{{range}}"
        captures: "#range"
      - match: "{{number}}"
        captures: "#number"
      - begin: '(\{) *'
        end: '{{lookahead_newline}}|(\}) *([^\}\,\n]*)'
        beginCaptures:
          1:
            name: "#nbt_delims"
        endCaptures:
          1:
            name: "#nbt_delims"
          2:
            name: "#error"
        patterns:
          - include: "#property_map"

  common.quoted_string:
    patterns:
      # consume everything except for backslashes, quotes, and newlines
      - match: '[^\\\"\n]'
        name: "#quoted_string"
      # consume any escaped characters... except for newlines
      - match: '\\[^\n]'
        name: "#quoted_string_escape"
      # consume a single backslash (implicitly followed by a newline) as an error
      - match: '\\'
        name: "#error"
      # anything else will be handed back to the parent scope

  common.single_quoted_string:
    patterns:
      - match: "[^\\\\\\'\\n]"
        name: "#quoted_string"
      - match: '\\[^\n]'
        name: "#quoted_string_escape"
      - match: '\\'
        name: "#error"
