{
  "name": "mcfunction",
  "scopeName": "source.mcfunction",
  "fileTypes": [
    "mcfunction"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#command"
    },
    {
      "include": "#unknown"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "meta.comment.mcfunction",
          "match": "^\\s*(#.*)$",
          "captures": {
            "1": {
              "name": "comment.number-sign.mcfunction",
              "patterns": [
                {
                  "name": "meta.comment.todo.mcfunction",
                  "match": "#\\s*((?:TODO|FIXME|DELETEME)\\s.*)$",
                  "captures": {
                    "1": {
                      "name": "markup.bold.mcfunction"
                    }
                  }
                },
                {
                  "name": "meta.comment.annotation.mcfunction",
                  "match": "#\\s*(\\@\\w*)\\s.*$",
                  "captures": {
                    "1": {
                      "name": "markup.bold.mcfunction"
                    }
                  }
                },
                {
                  "name": "meta.comment.annotation.mcfunction",
                  "match": "##\\s*(.*)$",
                  "captures": {
                    "1": {
                      "name": "markup.heading.mcfunction"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "name": "meta.command.mcfunction",
          "begin": "^\\s*([a-z_][a-z0-9_]*)[ \\n]",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.mcfunction"
            }
          },
          "patterns": [
            {
              "begin": "(?<= )",
              "end": "[ \\n]",
              "contentName": "meta.command.token.mcfunction",
              "patterns": [
                {
                  "include": "#command.tokens"
                }
              ]
            }
          ]
        }
      ]
    },
    "unknown": {
      "patterns": [
        {
          "name": "meta.unknown.mcfunction",
          "match": "^(.*)$",
          "captures": {
            "1": {
              "name": "invalid.illegal.mcfunction"
            }
          }
        }
      ]
    },
    "command.tokens": {
      "patterns": [
        {
          "include": "#command.token.selector_without_arguments"
        },
        {
          "include": "#command.token.resource_location"
        },
        {
          "include": "#command.token.tagged_resource_location"
        },
        {
          "include": "#command.token.range"
        },
        {
          "include": "#command.token.number"
        },
        {
          "include": "#command.token.coordinate"
        },
        {
          "include": "#command.token.literal"
        },
        {
          "include": "#command.token.uuid"
        },
        {
          "include": "#command.token.unquoted_string"
        },
        {
          "include": "#command.token.quoted_string"
        },
        {
          "include": "#command.token.unknown"
        }
      ]
    },
    "command.token.selector_without_arguments": {
      "name": "meta.command.token.selector_without_arguments.mcfunction",
      "match": "(?<= )(\\@[a-z])(?=[ \\n])",
      "captures": {
        "1": {
          "name": "variable.language.mcfunction"
        }
      }
    },
    "command.token.resource_location": {
      "name": "meta.command.token.resource_location.mcfunction",
      "match": "(?<= )([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "entity.name.function.mcfunction"
        },
        "2": {
          "name": "entity.name.function.mcfunction"
        },
        "3": {
          "name": "entity.name.function.mcfunction"
        }
      }
    },
    "command.token.tagged_resource_location": {
      "name": "meta.command.token.tagged_resource_location.mcfunction",
      "match": "(?<= )(\\#)([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "constant.character.escape.mcfunction"
        },
        "2": {
          "name": "constant.character.escape.mcfunction"
        },
        "3": {
          "name": "constant.character.escape.mcfunction"
        },
        "4": {
          "name": "constant.character.escape.mcfunction"
        }
      }
    },
    "command.token.range": {
      "name": "meta.command.token.range.mcfunction",
      "match": "(?<= )(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)?(?=[ \\n])",
      "captures": {
        "1": {
          "name": "constant.character.escape.mcfunction"
        },
        "2": {
          "name": "keyword.control.mcfunction"
        },
        "3": {
          "name": "constant.character.escape.mcfunction"
        }
      }
    },
    "command.token.number": {
      "name": "meta.command.token.number.mcfunction",
      "match": "(?<= )(\\-?\\d*\\.?\\d+)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "constant.numeric.mcfunction"
        }
      }
    },
    "command.token.coordinate": {
      "name": "meta.command.token.coordinate.mcfunction",
      "match": "(?<= )([\\~\\^])(\\-?\\d*\\.?\\d+)?(?=[ \\n])",
      "captures": {
        "1": {
          "name": "keyword.control.mcfunction"
        },
        "2": {
          "name": "constant.character.escape.mcfunction"
        }
      }
    },
    "command.token.literal": {
      "name": "meta.command.token.literal.mcfunction",
      "match": "(?<= )([a-z_][a-z0-9_]*)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "keyword.operator.mcfunction"
        }
      }
    },
    "command.token.uuid": {
      "name": "meta.command.token.uuid.mcfunction",
      "match": "(?<= )([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=[ \\n])",
      "captures": {
        "1": {
          "name": "variable.language.mcfunction"
        }
      }
    },
    "command.token.unquoted_string": {
      "name": "meta.command.token.unquoted_string.mcfunction",
      "match": "(?<= )([\\w\\.\\-\\#\\$\\%]+)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "string.unquoted.mcfunction"
        }
      }
    },
    "command.token.quoted_string": {
      "name": "meta.command.token.quoted_string.mcfunction",
      "begin": "(?<= )(\\\")",
      "end": "(?=\\n)|(\\\")([^ \\n]*)",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.mcfunction"
        }
      },
      "endCaptures": {
        "1": {
          "name": "string.quoted.mcfunction"
        },
        "2": {
          "name": "invalid.illegal.mcfunction"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.mcfunction",
          "match": "[^\\\\\\\"\\n]"
        },
        {
          "name": "constant.character.mcfunction",
          "match": "\\\\[^\\n]"
        },
        {
          "name": "invalid.illegal.mcfunction",
          "match": "\\\\"
        }
      ]
    },
    "command.token.unknown": {
      "name": "meta.command.token.unknown.mcfunction",
      "match": "(?<= )([^ \\n]*)(?=[ \\n])",
      "captures": {
        "1": {
          "name": "invalid.illegal.mcfunction"
        }
      }
    }
  }
}