{
  "name": "mcfunction",
  "scopeName": "source.mcfunction",
  "fileTypes": [
    "mcfunction"
  ],
  "variables": {
    "token_l": "(?<=\\s)",
    "token_r": "(?=\\s)",
    "literal": "[a-z0-9_\\.\\-]+",
    "number": "\\-?\\d*\\.?\\d+",
    "resource_location": "(\\#?)([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+)",
    "range": "(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)?",
    "coordinate": "([\\~\\^])(\\-?\\d*\\.?\\d+)?",
    "base_selector": "\\@[a-z]",
    "selector_key": "(\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?)"
  },
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#command"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.number-sign.mcfunction",
          "begin": "^\\s*#",
          "end": "$"
        }
      ]
    },
    "command": {
      "patterns": [
        {
          "name": "meta.command.mcfunction",
          "begin": "^\\s*([a-z0-9_\\.\\-]+)",
          "end": "$",
          "contentName": "invalid",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#tokens"
            }
          ]
        }
      ]
    },
    "tokens": {
      "patterns": [
        {
          "include": "#token.selector_without_arguments"
        },
        {
          "include": "#token.selector_with_arguments"
        },
        {
          "include": "#token.resource_location"
        },
        {
          "include": "#token.range"
        },
        {
          "include": "#token.number"
        },
        {
          "include": "#token.relative_coordinate"
        },
        {
          "include": "#token.local_coordinate"
        },
        {
          "include": "#token.literal"
        }
      ]
    },
    "token.selector_without_arguments": {
      "patterns": [
        {
          "name": "variable.language.mcfunction",
          "match": "(?<=\\s)\\@[a-z](?=\\s)"
        }
      ]
    },
    "token.selector_with_arguments": {
      "patterns": [
        {
          "name": "variable.language.mcfunction",
          "begin": "(?<=\\s)\\@[a-z](\\[)",
          "end": "(\\])(?=\\s)",
          "contentName": "invalid",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.control.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#selector_arguments"
            }
          ]
        }
      ]
    },
    "token.resource_location": {
      "patterns": [
        {
          "name": "meta.token.resource_location.mcfunction",
          "match": "(?<=\\s)((\\#?)([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+))(?=\\s)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#resource_location"
                }
              ]
            }
          }
        }
      ]
    },
    "token.range": {
      "patterns": [
        {
          "name": "meta.token.range.mcfunction",
          "match": "(?<=\\s)((\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)?)(?=\\s)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#range"
                }
              ]
            }
          }
        }
      ]
    },
    "token.number": {
      "patterns": [
        {
          "name": "meta.token.number.mcfunction",
          "match": "(?<=\\s)(\\-?\\d*\\.?\\d+)(?=\\s)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#number"
                }
              ]
            }
          }
        }
      ]
    },
    "token.coordinate": {
      "patterns": [
        {
          "name": "meta.token.coordinate.mcfunction",
          "match": "(?<=\\s)(([\\~\\^])(\\-?\\d*\\.?\\d+)?)(?=\\s)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#coordinate"
                }
              ]
            }
          }
        }
      ]
    },
    "selector_arguments": {
      "patterns": [
        {
          "include": "#selector_argument.range"
        },
        {
          "include": "#selector_argument.number"
        },
        {
          "include": "#selector_argument.resource_location"
        },
        {
          "include": "#selector_argument.literal"
        }
      ]
    },
    "selector.argument_key": {
      "patterns": [
        {
          "name": "meta.selector.argument_key.mcfunction",
          "match": "(\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?)",
          "captures": {
            "1": {
              "name": "keyword.control.mcfunction"
            },
            "2": {
              "name": "variable.parameter.mcfunction"
            },
            "3": {
              "name": "keyword.control.mcfunction"
            },
            "4": {
              "name": "string.regexp.mcfunction"
            }
          }
        }
      ]
    },
    "selector_argument.range": {
      "patterns": [
        {
          "name": "meta.selector_argument.range.mcfunction",
          "match": "((\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?))((\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)?)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#selector.argument_key"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#range"
                }
              ]
            }
          }
        }
      ]
    },
    "selector_argument.number": {
      "patterns": [
        {
          "name": "meta.selector_argument.number.mcfunction",
          "match": "((\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?))(\\-?\\d*\\.?\\d+)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#selector.argument_key"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#number"
                }
              ]
            }
          }
        }
      ]
    },
    "selector_argument.resource_location": {
      "patterns": [
        {
          "name": "meta.selector_argument.resource_location.mcfunction",
          "match": "((\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?))((\\#?)([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+))",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#selector.argument_key"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#resource_location"
                }
              ]
            }
          }
        }
      ]
    },
    "selector_argument.literal": {
      "patterns": [
        {
          "name": "meta.selector_argument.literal.mcfunction",
          "match": "((\\,?\\s*)([a-z0-9_\\.\\-]+)(\\=)(\\!?))([a-z0-9_\\.\\-]+)",
          "captures": {
            "1": {
              "patterns": [
                {
                  "include": "#selector.argument_key"
                }
              ]
            },
            "6": {
              "patterns": [
                {
                  "include": "#literal"
                }
              ]
            }
          }
        }
      ]
    },
    "range": {
      "patterns": [
        {
          "name": "constant.numeric.mcfunction",
          "match": "(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "2": {
              "name": "string.regexp.mcfunction"
            }
          }
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.mcfunction",
          "match": "\\-?\\d*\\.?\\d+"
        }
      ]
    },
    "coordinate": {
      "patterns": [
        {
          "name": "constant.numeric.mcfunction",
          "match": "([\\~\\^])(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "keyword.control.mcfunction"
            }
          }
        }
      ]
    },
    "resource_location": {
      "patterns": [
        {
          "name": "entity.name.type.mcfunction",
          "match": "(\\#?)([a-z0-9_\\.\\-]+)(\\:)([a-z0-9_\\.\\-\\/]+)"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "name": "keyword.operator.mcfunction",
          "match": "[a-z0-9_\\.\\-]+"
        }
      ]
    }
  }
}