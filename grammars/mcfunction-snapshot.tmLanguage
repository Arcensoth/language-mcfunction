<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>mcfunction-snapshot</string>
    <key>scopeName</key>
    <string>source.mcfunction-snapshot</string>
    <key>fileTypes</key>
    <array>
      <string>mcfunction</string>
    </array>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#command</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#unknown</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.comment.mcfunction</string>
            <key>begin</key>
            <string>^[ \t]*(?=\#)</string>
            <key>end</key>
            <string>\n</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>comments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment.heading</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment.marker</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment.annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment.other</string>
          </dict>
        </array>
      </dict>
      <key>comment.heading</key>
      <dict>
        <key>name</key>
        <string>meta._.heading.comment.mcfunction</string>
        <key>match</key>
        <string>(##)[ \t]*(.*)$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment._.comment.mcfunction</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.heading._.heading.comment.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>comment.marker</key>
      <dict>
        <key>name</key>
        <string>meta._.marker.comment.mcfunction</string>
        <key>match</key>
        <string>(#)[ \t]*((?:TODO|FIXME|XXX))(\b.*)$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment._.comment.mcfunction</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.bold._.name.marker.comment.mcfunction</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment._.text.marker.comment.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>comment.annotation</key>
      <dict>
        <key>name</key>
        <string>meta._.annotation.comment.mcfunction</string>
        <key>match</key>
        <string>(#)[ \t]*(\@\w*)(\b.*)$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment._.comment.mcfunction</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.heading._.name.annotation.comment.mcfunction</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>comment._.text.annotation.comment.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>comment.other</key>
      <dict>
        <key>name</key>
        <string>meta._.other.comment.mcfunction</string>
        <key>match</key>
        <string>(#.*)$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>comment._.comment.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>command</key>
      <dict>
        <key>name</key>
        <string>meta._.command.mcfunction</string>
        <key>begin</key>
        <string>^[ \t]*(?=[^\s\#])</string>
        <key>end</key>
        <string>\n</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#commands</string>
          </dict>
        </array>
      </dict>
      <key>commands</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands</string>
          </dict>
        </array>
      </dict>
      <key>unknown</key>
      <dict>
        <key>name</key>
        <string>meta._.unknown.mcfunction</string>
        <key>match</key>
        <string>^((.*))$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal._.invalid.mcfunction</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.underline._.underline.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>error.unknown_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(([^\n\"]+))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>error.unknown_compound</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(([^\n\}]+))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>error.unknown_list</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(([^\n\]]+))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>error.unknown_command</key>
      <dict>
        <key>name</key>
        <string>meta._.unknown_command.mcfunction</string>
        <key>match</key>
        <string>((.*))$</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal._.invalid.mcfunction</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>markup.underline._.underline.mcfunction</string>
          </dict>
        </dict>
      </dict>
      <key>error.compound_value</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#error.compound</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.list</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(([^\n\{\[\,\}]))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>error.compound</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>((\{))</string>
            <key>end</key>
            <string>((\}))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>invalid.illegal._.invalid.mcfunction</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#error.compound</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.list</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(([^\n\{\[\}]))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal._.invalid.mcfunction</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.underline._.underline.mcfunction</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>error.list</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>((\[))</string>
            <key>end</key>
            <string>((\]))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>invalid.illegal._.invalid.mcfunction</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#error.compound</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.list</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(([^\n\{\[\]]))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal._.invalid.mcfunction</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>markup.underline._.underline.mcfunction</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>common.unquoted_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([\w\.\-\+]+)</string>
            <key>name</key>
            <string>string._.word.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>common.double_quoted_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")</string>
            <key>end</key>
            <string>(?=\n)|(\")</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.double_quoted_string.content</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>common.single_quoted_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\')</string>
            <key>end</key>
            <string>(?=\n)|(\')</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.single_quoted_string.content</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>common.double_quoted_string.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[^\\\"\n]</string>
            <key>name</key>
            <string>string._.string.mcfunction</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\[^\n]</string>
            <key>name</key>
            <string>constant.character.escape._.string_escape.mcfunction</string>
          </dict>
          <dict>
            <key>match</key>
            <string>((\\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>common.single_quoted_string.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[^\\\'\n]</string>
            <key>name</key>
            <string>string._.string.mcfunction</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\[^\n]</string>
            <key>name</key>
            <string>constant.character.escape._.string_escape.mcfunction</string>
          </dict>
          <dict>
            <key>match</key>
            <string>((\\))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal._.invalid.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>markup.underline._.underline.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>common.quoted_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#common.double_quoted_string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#common.single_quoted_string</string>
          </dict>
        </array>
      </dict>
      <key>common.quotable_string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#common.quoted_string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#common.unquoted_string</string>
          </dict>
        </array>
      </dict>
      <key>common.integer_range</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(\-?\d*)(\.\.)(\-?\d*)?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.minimum.range.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control._.ellipsis.range.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.maximum.range.mcfunction</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\-?\d*)?(\.\.)(\-?\d*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.minimum.range.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control._.ellipsis.range.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.maximum.range.mcfunction</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\-?\d*)</string>
            <key>name</key>
            <string>constant.numeric._.number.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>common.double_range</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(\-?\d*\.?\d+)(\.\.)(\-?\d*\.?\d+)?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.minimum.range.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control._.ellipsis.range.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.maximum.range.mcfunction</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\-?\d*\.?\d+)?(\.\.)(\-?\d*\.?\d+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.minimum.range.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control._.ellipsis.range.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.maximum.range.mcfunction</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(\-?\d*\.?\d+)</string>
            <key>name</key>
            <string>constant.numeric._.number.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>common.resource_location</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([a-z0-9_\.\-]+)?(\:)?([a-z0-9_\.\-\/]+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.namespace.resource_location.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.colon.resource_location.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.path.resource_location.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>common.tagged_resource_location</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(\#)([a-z0-9_\.\-]+)?(\:)?([a-z0-9_\.\-\/]+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.hash.resource_location.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.namespace.resource_location.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.colon.resource_location.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.function._.path.resource_location.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>common.taggable_resource_location</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#common.tagged_resource_location</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#common.resource_location</string>
          </dict>
        </array>
      </dict>
      <key>common.message</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>([^\@\n]+)</string>
            <key>name</key>
            <string>string._.string.mcfunction</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\@[parse])(\[)(?= *[\w\]])</string>
            <key>end</key>
            <string>(?=\n)|(\])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#target_selector.content</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(\@[parse])</string>
            <key>name</key>
            <string>support.class._.base.target_selector.mcfunction</string>
          </dict>
          <dict>
            <key>match</key>
            <string>([^\n])</string>
            <key>name</key>
            <string>string._.string.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>nbt.compound.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[^\n\}]+</string>
            <key>name</key>
            <string>string.regexp._.todo.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>score_map.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[^\n\}]+</string>
            <key>name</key>
            <string>string.regexp._.todo.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>advancement_map.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>[^\n\}]+</string>
            <key>name</key>
            <string>string.regexp._.todo.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>text_component</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#text_component.boolean</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.list</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.compound</string>
          </dict>
        </array>
      </dict>
      <key>text_component.boolean</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(true|false)</string>
            <key>name</key>
            <string>constant.numeric._.boolean.mcfunction</string>
          </dict>
        </array>
      </dict>
      <key>text_component.string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")</string>
            <key>end</key>
            <string>(?=\n)|(\")</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.double_quoted_string.content</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_string</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.list</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\[)</string>
            <key>end</key>
            <string>(?=\n)|(\])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage._.list_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage._.list_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta._.list.text_component.property_separator.mcfunction</string>
                <key>match</key>
                <string>(?&lt;=[^\[\,])(\,)(?=[^\]\,])</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage._.list_comma.nbt.mcfunction</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\[\,]) +(?=[^\]\,])</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[^\[\,]) +(?=[\]\,])</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=\[) +(?=\])</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#text_component.list_values</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.list_values</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#text_component</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_list</string>
          </dict>
        </array>
      </dict>
      <key>text_component.compound</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\{)</string>
            <key>end</key>
            <string>(?=\n)|(\})</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta._.compound.text_component.property_separator.mcfunction</string>
                <key>match</key>
                <string>(?&lt;=[^\{\,])(\,)(?=[^\}\,])</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage._.compound_comma.nbt.mcfunction</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[\{\,]) +(?=[^\}\,])</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=[^\{\,]) +(?=[\}\,])</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(?&lt;=\{) +(?=\})</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#text_component.compound_properties</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.compound_properties</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#text_component.compound_property.bold</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.compound_property.text</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.compound_property.selector</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#text_component.compound_property.extra</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_compound</string>
          </dict>
        </array>
      </dict>
      <key>text_component.compound_property.bold</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")(bold)(\") *(\:) *</string>
            <key>end</key>
            <string>(?=\n)|(?= *[\,\}])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>string._.property.text_component.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_colon.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#text_component.boolean</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.compound_value</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.compound_property.text</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")(text)(\") *(\:) *(\")</string>
            <key>end</key>
            <string>(?=\n)|(\")</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>string._.property.text_component.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_colon.nbt.mcfunction</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.double_quoted_string.content</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_string</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.compound_property.selector</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")(selector)(\") *(\:) *(\")</string>
            <key>end</key>
            <string>(?=\n)|(\")</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>string._.property.text_component.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_colon.nbt.mcfunction</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>(\@[parse])(?=\")</string>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
              <dict>
                <key>match</key>
                <string>([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\")</string>
                <key>name</key>
                <string>support.class._.uuid.target.mcfunction</string>
              </dict>
              <dict>
                <key>match</key>
                <string>(\w+)(?=\")</string>
                <key>name</key>
                <string>support.class._.player_name.target.mcfunction</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(\@[parse])(\[)(?= *[\w\]])</string>
                <key>end</key>
                <string>(?=\n)|(?=\")|(\])</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>support.class._.base.target_selector.mcfunction</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>support.class._.bracket.target_selector.mcfunction</string>
                  </dict>
                </dict>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>support.class._.bracket.target_selector.mcfunction</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#target_selector.content</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#error.unknown_string</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_string</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>text_component.compound_property.extra</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\")(extra)(\") *(\:) *</string>
            <key>end</key>
            <string>(?=\n)|(?= *[\,\}])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>string._.property.text_component.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>string._.string.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_colon.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#text_component.list</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.compound_value</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.argument_separator.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(?&lt;=[^\[\,])(\,)(?= *\w)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.comma.target_selector.mcfunction</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[\[\,]) +(?=\w)</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[^\[\,]) +(?=[\]\,])</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=\[) +(?=\])</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.arguments</string>
          </dict>
        </array>
      </dict>
      <key>target_selector.arguments</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.xyz</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.dxyz</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.xy_rotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.distance</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.team</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.tag</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.level</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.gamemode</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.sort</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.limit</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.scores</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.advancements</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#target_selector.content.argument.nbt</string>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.xyz</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.xyz.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(x|y|z) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.number.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.dxyz</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.dxyz.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(dx|dy|dz) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.number.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.xy_rotation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.xy_rotation.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(x_rotation|y_rotation) *(\=) *(?=[^\n\]\,])</string>
            <key>end</key>
            <string>(?=\n)| *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.double_range</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.distance</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.distance.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(distance) *(\=) *(?=[^\n\]\,])</string>
            <key>end</key>
            <string>(?=\n)| *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.double_range</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.team</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.team.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(team) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>string._.scoreboard_team.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.tag</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.tag.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(tag) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>string._.entity_tag.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.name.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(name) *(\=) *(\!?) *</string>
            <key>end</key>
            <string>(?=\n)| *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.quotable_string</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.type.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(type) *(\=) *(\!?) *(?=[^\n\]\,])</string>
            <key>end</key>
            <string>(?=\n)| *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.taggable_resource_location</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.level</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.level.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(level) *(\=) *(?=[^\n\]\,])</string>
            <key>end</key>
            <string>(?=\n)| *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#common.integer_range</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.gamemode</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.gamemode.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(gamemode) *(\=) *(\!?) *(survival|creative|adventure|spectator) *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword._.keyword.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.sort</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.sort.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(sort) *(\=) *(arbitrary|furthest|nearest|random) *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword._.keyword.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.limit</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.limit.argument.content.target_selector.mcfunction</string>
            <key>match</key>
            <string>(limit) *(\=) *(0*[1-9]\d*) *(?=[\]\,])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.numeric._.number.mcfunction</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.scores</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.scores.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(scores) *(\=) *(\{)</string>
            <key>end</key>
            <string>(?=\n)|(\}) *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.score_map.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.score_map.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#score_map.content</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.advancements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.advancements.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(advancements) *(\=) *(\{)</string>
            <key>end</key>
            <string>(?=\n)|(\}) *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.advancement_map.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.advancement_map.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#advancement_map.content</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>target_selector.content.argument.nbt</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta._.nbt.argument.content.target_selector.mcfunction</string>
            <key>begin</key>
            <string>(nbt) *(\=) *(\!?) *(\{)</string>
            <key>end</key>
            <string>(?=\n)|(\}) *(?=[\]\,])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.other._.param.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.equals.target_selector.mcfunction</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.character.escape._.not.target_selector.mcfunction</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage._.compound_bracket.nbt.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#nbt.compound.content</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>generated.commands</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.command.say</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generated.command.tellraw</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generated.command.execute</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.say</key>
      <dict>
        <key>begin</key>
        <string>(say) (?=[^\s\#])</string>
        <key>end</key>
        <string>(?=\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control._.command.mcfunction</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.say</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.say</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.command.say.message</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.say.message</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#common.message</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.tellraw</key>
      <dict>
        <key>begin</key>
        <string>(tellraw) (?=[^\s\#])</string>
        <key>end</key>
        <string>(?=\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control._.command.mcfunction</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.tellraw</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.tellraw</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.command.tellraw.targets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.tellraw.targets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\@[parse]) (?=[^\s\#])</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.tellraw.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=[^\s\#])</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.uuid.target.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.tellraw.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\w+) (?=[^\s\#])</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.player_name.target.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.tellraw.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\@[parse])(\[)(?= *[\w\]])</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(\]) (?=[^\s\#])</string>
                <key>end</key>
                <string>(?=\n)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>support.class._.bracket.target_selector.mcfunction</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#generated.commands.tellraw.targets</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#target_selector.content</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.tellraw.targets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#text_component</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.execute</key>
      <dict>
        <key>begin</key>
        <string>(execute) (?=[^\s\#])</string>
        <key>end</key>
        <string>(?=\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control._.command.mcfunction</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.execute</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.execute</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.command.execute.run</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#generated.command.execute.as</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.execute.run</key>
      <dict>
        <key>begin</key>
        <string>(run)( |(?=\n))</string>
        <key>end</key>
        <string>(?=\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other._.subcommand.mcfunction</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.execute.run</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.execute.run</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.execute.as</key>
      <dict>
        <key>begin</key>
        <string>(as) (?=[^\s\#])</string>
        <key>end</key>
        <string>(?=\n)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.other._.subcommand.mcfunction</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.execute.as</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.execute.as</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.command.execute.as.targets</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.command.execute.as.targets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(\@[parse])( |(?=\n))</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.execute.as.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.uuid.target.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.execute.as.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\w+)( |(?=\n))</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.player_name.target.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#generated.commands.execute.as.targets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(\@[parse])(\[)(?= *[\w\]])</string>
            <key>end</key>
            <string>(?=\n)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class._.base.target_selector.mcfunction</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class._.bracket.target_selector.mcfunction</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(\])( |(?=\n))</string>
                <key>end</key>
                <string>(?=\n)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>support.class._.bracket.target_selector.mcfunction</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#generated.commands.execute.as.targets</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#target_selector.content</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#error.unknown_command</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#error.unknown_command</string>
          </dict>
        </array>
      </dict>
      <key>generated.commands.execute.as.targets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#generated.commands.execute</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>