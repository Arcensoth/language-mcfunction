{
  "name": "mcfunction-snapshot",
  "scopeName": "source.mcfunction-snapshot",
  "fileTypes": [
    "mcfunction"
  ],
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#command"
    },
    {
      "include": "#unknown"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "meta._.comment.mcfunction",
          "begin": "^[ \\t]*(?=\\#)",
          "end": "\\n",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "include": "#comment.heading"
        },
        {
          "include": "#comment.marker"
        },
        {
          "include": "#comment.annotation"
        },
        {
          "include": "#comment.other"
        }
      ]
    },
    "comment.heading": {
      "name": "meta._.heading.comment.mcfunction",
      "match": "(##)[ \\t]*(.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.heading._.heading.comment.mcfunction"
        }
      }
    },
    "comment.marker": {
      "name": "meta._.marker.comment.mcfunction",
      "match": "(#)[ \\t]*((?:TODO|FIXME|XXX))(\\b.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.bold._.name.marker.comment.mcfunction"
        },
        "3": {
          "name": "comment._.text.marker.comment.mcfunction"
        }
      }
    },
    "comment.annotation": {
      "name": "meta._.annotation.comment.mcfunction",
      "match": "(#)[ \\t]*(\\@\\w*)(\\b.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        },
        "2": {
          "name": "markup.heading._.name.annotation.comment.mcfunction"
        },
        "3": {
          "name": "comment._.text.annotation.comment.mcfunction"
        }
      }
    },
    "comment.other": {
      "name": "meta._.other.comment.mcfunction",
      "match": "(#.*)$",
      "captures": {
        "1": {
          "name": "comment._.comment.mcfunction"
        }
      }
    },
    "command": {
      "name": "meta._.command.mcfunction",
      "begin": "^[ \\t]*(?=[^\\s\\#])",
      "end": "\\n",
      "patterns": [
        {
          "include": "#commands"
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "include": "#generated.commands"
        }
      ]
    },
    "unknown": {
      "name": "meta._.unknown.mcfunction",
      "match": "^((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.unknown_string": {
      "patterns": [
        {
          "match": "(([^\\n\\\"]+))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.unknown_compound": {
      "patterns": [
        {
          "match": "(([^\\n\\}]+))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.unknown_list": {
      "patterns": [
        {
          "match": "(([^\\n\\]]+))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.unknown_command": {
      "name": "meta._.unknown_command.mcfunction",
      "match": "((.*))$",
      "captures": {
        "1": {
          "name": "invalid.illegal._.invalid.mcfunction"
        },
        "2": {
          "name": "markup.underline._.underline.mcfunction"
        }
      }
    },
    "error.compound_value": {
      "patterns": [
        {
          "include": "#error.compound"
        },
        {
          "include": "#error.list"
        },
        {
          "match": "(([^\\n\\{\\[\\,\\}]))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "error.compound": {
      "patterns": [
        {
          "begin": "((\\{))",
          "end": "((\\}))",
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "contentName": "invalid.illegal._.invalid.mcfunction",
          "patterns": [
            {
              "include": "#error.compound"
            },
            {
              "include": "#error.list"
            },
            {
              "match": "(([^\\n\\{\\[\\}]))",
              "captures": {
                "1": {
                  "name": "invalid.illegal._.invalid.mcfunction"
                },
                "2": {
                  "name": "markup.underline._.underline.mcfunction"
                }
              }
            }
          ]
        }
      ]
    },
    "error.list": {
      "patterns": [
        {
          "begin": "((\\[))",
          "end": "((\\]))",
          "beginCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          },
          "contentName": "invalid.illegal._.invalid.mcfunction",
          "patterns": [
            {
              "include": "#error.compound"
            },
            {
              "include": "#error.list"
            },
            {
              "match": "(([^\\n\\{\\[\\]]))",
              "captures": {
                "1": {
                  "name": "invalid.illegal._.invalid.mcfunction"
                },
                "2": {
                  "name": "markup.underline._.underline.mcfunction"
                }
              }
            }
          ]
        }
      ]
    },
    "common.unquoted_string": {
      "patterns": [
        {
          "match": "([\\w\\.\\-\\+]+)",
          "name": "string._.word.mcfunction"
        }
      ]
    },
    "common.double_quoted_string": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.double_quoted_string.content"
            }
          ]
        }
      ]
    },
    "common.single_quoted_string": {
      "patterns": [
        {
          "begin": "(\\')",
          "end": "(?=\\n)|(\\')",
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.single_quoted_string.content"
            }
          ]
        }
      ]
    },
    "common.double_quoted_string.content": {
      "patterns": [
        {
          "match": "[^\\\\\\\"\\n]",
          "name": "string._.string.mcfunction"
        },
        {
          "match": "\\\\[^\\n]",
          "name": "constant.character.escape._.string_escape.mcfunction"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.single_quoted_string.content": {
      "patterns": [
        {
          "match": "[^\\\\\\'\\n]",
          "name": "string._.string.mcfunction"
        },
        {
          "match": "\\\\[^\\n]",
          "name": "constant.character.escape._.string_escape.mcfunction"
        },
        {
          "match": "((\\\\))",
          "captures": {
            "1": {
              "name": "invalid.illegal._.invalid.mcfunction"
            },
            "2": {
              "name": "markup.underline._.underline.mcfunction"
            }
          }
        }
      ]
    },
    "common.quoted_string": {
      "patterns": [
        {
          "include": "#common.double_quoted_string"
        },
        {
          "include": "#common.single_quoted_string"
        }
      ]
    },
    "common.quotable_string": {
      "patterns": [
        {
          "include": "#common.quoted_string"
        },
        {
          "include": "#common.unquoted_string"
        }
      ]
    },
    "common.integer_range": {
      "patterns": [
        {
          "match": "(\\-?\\d*)(\\.\\.)(\\-?\\d*)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*)?(\\.\\.)(\\-?\\d*)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*)",
          "name": "constant.numeric._.number.mcfunction"
        }
      ]
    },
    "common.double_range": {
      "patterns": [
        {
          "match": "(\\-?\\d*\\.?\\d+)(\\.\\.)(\\-?\\d*\\.?\\d+)?",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*\\.?\\d+)?(\\.\\.)(\\-?\\d*\\.?\\d+)",
          "captures": {
            "1": {
              "name": "constant.numeric._.minimum.range.mcfunction"
            },
            "2": {
              "name": "keyword.control._.ellipsis.range.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.maximum.range.mcfunction"
            }
          }
        },
        {
          "match": "(\\-?\\d*\\.?\\d+)",
          "name": "constant.numeric._.number.mcfunction"
        }
      ]
    },
    "common.resource_location": {
      "patterns": [
        {
          "match": "([a-z0-9_\\.\\-]+)?(\\:)?([a-z0-9_\\.\\-\\/]+)",
          "captures": {
            "1": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.tagged_resource_location": {
      "patterns": [
        {
          "match": "(\\#)([a-z0-9_\\.\\-]+)?(\\:)?([a-z0-9_\\.\\-\\/]+)",
          "captures": {
            "1": {
              "name": "entity.name.function._.hash.resource_location.mcfunction"
            },
            "2": {
              "name": "entity.name.function._.namespace.resource_location.mcfunction"
            },
            "3": {
              "name": "entity.name.function._.colon.resource_location.mcfunction"
            },
            "4": {
              "name": "entity.name.function._.path.resource_location.mcfunction"
            }
          }
        }
      ]
    },
    "common.taggable_resource_location": {
      "patterns": [
        {
          "include": "#common.tagged_resource_location"
        },
        {
          "include": "#common.resource_location"
        }
      ]
    },
    "common.message": {
      "patterns": [
        {
          "match": "([^\\@\\n]+)",
          "name": "string._.string.mcfunction"
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)|(\\])",
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        },
        {
          "match": "(\\@[parse])",
          "name": "support.class._.base.target_selector.mcfunction"
        },
        {
          "match": "([^\\n])",
          "name": "string._.string.mcfunction"
        }
      ]
    },
    "nbt.compound.content": {
      "patterns": [
        {
          "match": "[^\\n\\}]+",
          "name": "string.regexp._.todo.mcfunction"
        }
      ]
    },
    "score_map.content": {
      "patterns": [
        {
          "match": "[^\\n\\}]+",
          "name": "string.regexp._.todo.mcfunction"
        }
      ]
    },
    "advancement_map.content": {
      "patterns": [
        {
          "match": "[^\\n\\}]+",
          "name": "string.regexp._.todo.mcfunction"
        }
      ]
    },
    "text_component": {
      "patterns": [
        {
          "include": "#text_component.boolean"
        },
        {
          "include": "#text_component.string"
        },
        {
          "include": "#text_component.list"
        },
        {
          "include": "#text_component.compound"
        }
      ]
    },
    "text_component.boolean": {
      "patterns": [
        {
          "match": "(true|false)",
          "name": "constant.numeric._.boolean.mcfunction"
        }
      ]
    },
    "text_component.string": {
      "patterns": [
        {
          "begin": "(\\\")",
          "end": "(?=\\n)|(\\\")",
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.double_quoted_string.content"
            },
            {
              "include": "#error.unknown_string"
            }
          ]
        }
      ]
    },
    "text_component.list": {
      "patterns": [
        {
          "begin": "(\\[)",
          "end": "(?=\\n)|(\\])",
          "beginCaptures": {
            "1": {
              "name": "storage._.list_bracket.nbt.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.list_bracket.nbt.mcfunction"
            }
          },
          "patterns": [
            {
              "name": "meta._.list.text_component.property_separator.mcfunction",
              "match": "(?<=[^\\[\\,])(\\,)(?=[^\\]\\,])",
              "captures": {
                "1": {
                  "name": "storage._.list_comma.nbt.mcfunction"
                }
              }
            },
            {
              "match": "(?<=[\\[\\,]) +(?=[^\\]\\,])"
            },
            {
              "match": "(?<=[^\\[\\,]) +(?=[\\]\\,])"
            },
            {
              "match": "(?<=\\[) +(?=\\])"
            },
            {
              "include": "#text_component.list_values"
            }
          ]
        }
      ]
    },
    "text_component.list_values": {
      "patterns": [
        {
          "include": "#text_component"
        },
        {
          "include": "#error.unknown_list"
        }
      ]
    },
    "text_component.compound": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(?=\\n)|(\\})",
          "beginCaptures": {
            "1": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          },
          "patterns": [
            {
              "name": "meta._.compound.text_component.property_separator.mcfunction",
              "match": "(?<=[^\\{\\,])(\\,)(?=[^\\}\\,])",
              "captures": {
                "1": {
                  "name": "storage._.compound_comma.nbt.mcfunction"
                }
              }
            },
            {
              "match": "(?<=[\\{\\,]) +(?=[^\\}\\,])"
            },
            {
              "match": "(?<=[^\\{\\,]) +(?=[\\}\\,])"
            },
            {
              "match": "(?<=\\{) +(?=\\})"
            },
            {
              "include": "#text_component.compound_properties"
            }
          ]
        }
      ]
    },
    "text_component.compound_properties": {
      "patterns": [
        {
          "include": "#text_component.compound_property.bold"
        },
        {
          "include": "#text_component.compound_property.text"
        },
        {
          "include": "#text_component.compound_property.selector"
        },
        {
          "include": "#text_component.compound_property.extra"
        },
        {
          "include": "#error.unknown_compound"
        }
      ]
    },
    "text_component.compound_property.bold": {
      "patterns": [
        {
          "begin": "(\\\")(bold)(\\\") *(\\:) *",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "captures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#text_component.boolean"
            },
            {
              "include": "#error.compound_value"
            }
          ]
        }
      ]
    },
    "text_component.compound_property.text": {
      "patterns": [
        {
          "begin": "(\\\")(text)(\\\") *(\\:) *(\\\")",
          "end": "(?=\\n)|(\\\")",
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            },
            "5": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.double_quoted_string.content"
            },
            {
              "include": "#error.unknown_string"
            }
          ]
        }
      ]
    },
    "text_component.compound_property.selector": {
      "patterns": [
        {
          "begin": "(\\\")(selector)(\\\") *(\\:) *(\\\")",
          "end": "(?=\\n)|(\\\")",
          "beginCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            },
            "5": {
              "name": "string._.string.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "string._.string.mcfunction"
            }
          },
          "patterns": [
            {
              "match": "(\\@[parse])(?=\\\")",
              "name": "support.class._.base.target_selector.mcfunction"
            },
            {
              "match": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\\\")",
              "name": "support.class._.uuid.target.mcfunction"
            },
            {
              "match": "(\\w+)(?=\\\")",
              "name": "support.class._.player_name.target.mcfunction"
            },
            {
              "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
              "end": "(?=\\n)|(?=\\\")|(\\])",
              "beginCaptures": {
                "1": {
                  "name": "support.class._.base.target_selector.mcfunction"
                },
                "2": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              },
              "endCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              },
              "patterns": [
                {
                  "include": "#target_selector.content"
                },
                {
                  "include": "#error.unknown_string"
                }
              ]
            },
            {
              "include": "#error.unknown_string"
            }
          ]
        }
      ]
    },
    "text_component.compound_property.extra": {
      "patterns": [
        {
          "begin": "(\\\")(extra)(\\\") *(\\:) *",
          "end": "(?=\\n)|(?= *[\\,\\}])",
          "captures": {
            "1": {
              "name": "string._.string.mcfunction"
            },
            "2": {
              "name": "string._.property.text_component.mcfunction"
            },
            "3": {
              "name": "string._.string.mcfunction"
            },
            "4": {
              "name": "storage._.compound_colon.nbt.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#text_component.list"
            },
            {
              "include": "#error.compound_value"
            }
          ]
        }
      ]
    },
    "target_selector.content": {
      "patterns": [
        {
          "name": "meta._.argument_separator.content.target_selector.mcfunction",
          "match": "(?<=[^\\[\\,])(\\,)(?= *\\w)",
          "captures": {
            "1": {
              "name": "support.class._.comma.target_selector.mcfunction"
            }
          }
        },
        {
          "match": "(?<=[\\[\\,]) +(?=\\w)"
        },
        {
          "match": "(?<=[^\\[\\,]) +(?=[\\]\\,])"
        },
        {
          "match": "(?<=\\[) +(?=\\])"
        },
        {
          "include": "#target_selector.arguments"
        }
      ]
    },
    "target_selector.arguments": {
      "patterns": [
        {
          "include": "#target_selector.content.argument.xyz"
        },
        {
          "include": "#target_selector.content.argument.dxyz"
        },
        {
          "include": "#target_selector.content.argument.xy_rotation"
        },
        {
          "include": "#target_selector.content.argument.distance"
        },
        {
          "include": "#target_selector.content.argument.team"
        },
        {
          "include": "#target_selector.content.argument.tag"
        },
        {
          "include": "#target_selector.content.argument.name"
        },
        {
          "include": "#target_selector.content.argument.type"
        },
        {
          "include": "#target_selector.content.argument.level"
        },
        {
          "include": "#target_selector.content.argument.gamemode"
        },
        {
          "include": "#target_selector.content.argument.sort"
        },
        {
          "include": "#target_selector.content.argument.limit"
        },
        {
          "include": "#target_selector.content.argument.scores"
        },
        {
          "include": "#target_selector.content.argument.advancements"
        },
        {
          "include": "#target_selector.content.argument.nbt"
        }
      ]
    },
    "target_selector.content.argument.xyz": {
      "patterns": [
        {
          "name": "meta._.xyz.argument.content.target_selector.mcfunction",
          "match": "(x|y|z) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.dxyz": {
      "patterns": [
        {
          "name": "meta._.dxyz.argument.content.target_selector.mcfunction",
          "match": "(dx|dy|dz) *(\\=) *(\\-?\\d*\\.?\\d+) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.xy_rotation": {
      "patterns": [
        {
          "name": "meta._.xy_rotation.argument.content.target_selector.mcfunction",
          "begin": "(x_rotation|y_rotation) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.distance": {
      "patterns": [
        {
          "name": "meta._.distance.argument.content.target_selector.mcfunction",
          "begin": "(distance) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.double_range"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.team": {
      "patterns": [
        {
          "name": "meta._.team.argument.content.target_selector.mcfunction",
          "match": "(team) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "string._.scoreboard_team.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.tag": {
      "patterns": [
        {
          "name": "meta._.tag.argument.content.target_selector.mcfunction",
          "match": "(tag) *(\\=) *(\\!?) *([\\w\\.\\-\\+]+)? *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "string._.entity_tag.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.name": {
      "patterns": [
        {
          "name": "meta._.name.argument.content.target_selector.mcfunction",
          "begin": "(name) *(\\=) *(\\!?) *",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.quotable_string"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.type": {
      "patterns": [
        {
          "name": "meta._.type.argument.content.target_selector.mcfunction",
          "begin": "(type) *(\\=) *(\\!?) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.taggable_resource_location"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.level": {
      "patterns": [
        {
          "name": "meta._.level.argument.content.target_selector.mcfunction",
          "begin": "(level) *(\\=) *(?=[^\\n\\]\\,])",
          "end": "(?=\\n)| *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#common.integer_range"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.gamemode": {
      "patterns": [
        {
          "name": "meta._.gamemode.argument.content.target_selector.mcfunction",
          "match": "(gamemode) *(\\=) *(\\!?) *(survival|creative|adventure|spectator) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.sort": {
      "patterns": [
        {
          "name": "meta._.sort.argument.content.target_selector.mcfunction",
          "match": "(sort) *(\\=) *(arbitrary|furthest|nearest|random) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "keyword._.keyword.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.limit": {
      "patterns": [
        {
          "name": "meta._.limit.argument.content.target_selector.mcfunction",
          "match": "(limit) *(\\=) *(0*[1-9]\\d*) *(?=[\\]\\,])",
          "captures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.numeric._.number.mcfunction"
            }
          }
        }
      ]
    },
    "target_selector.content.argument.scores": {
      "patterns": [
        {
          "name": "meta._.scores.argument.content.target_selector.mcfunction",
          "begin": "(scores) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "support.class._.bracket.score_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.score_map.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#score_map.content"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.advancements": {
      "patterns": [
        {
          "name": "meta._.advancements.argument.content.target_selector.mcfunction",
          "begin": "(advancements) *(\\=) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "support.class._.bracket.advancement_map.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "support.class._.bracket.advancement_map.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#advancement_map.content"
            }
          ]
        }
      ]
    },
    "target_selector.content.argument.nbt": {
      "patterns": [
        {
          "name": "meta._.nbt.argument.content.target_selector.mcfunction",
          "begin": "(nbt) *(\\=) *(\\!?) *(\\{)",
          "end": "(?=\\n)|(\\}) *(?=[\\]\\,])",
          "beginCaptures": {
            "1": {
              "name": "keyword.other._.param.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.equals.target_selector.mcfunction"
            },
            "3": {
              "name": "constant.character.escape._.not.target_selector.mcfunction"
            },
            "4": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          },
          "endCaptures": {
            "1": {
              "name": "storage._.compound_bracket.nbt.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#nbt.compound.content"
            }
          ]
        }
      ]
    },
    "generated.commands": {
      "patterns": [
        {
          "include": "#generated.command.say"
        },
        {
          "include": "#generated.command.tellraw"
        },
        {
          "include": "#generated.command.execute"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.say": {
      "begin": "(say) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      },
      "patterns": [
        {
          "include": "#generated.commands.say"
        }
      ]
    },
    "generated.commands.say": {
      "patterns": [
        {
          "include": "#generated.command.say.message"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.say.message": {
      "patterns": [
        {
          "include": "#common.message"
        }
      ]
    },
    "generated.command.tellraw": {
      "begin": "(tellraw) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      },
      "patterns": [
        {
          "include": "#generated.commands.tellraw"
        }
      ]
    },
    "generated.commands.tellraw": {
      "patterns": [
        {
          "include": "#generated.command.tellraw.targets"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.tellraw.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse]) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ]
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ]
        },
        {
          "begin": "(\\w+) (?=[^\\s\\#])",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.tellraw.targets"
            }
          ]
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "begin": "(\\]) (?=[^\\s\\#])",
              "end": "(?=\\n)",
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              },
              "patterns": [
                {
                  "include": "#generated.commands.tellraw.targets"
                }
              ]
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.commands.tellraw.targets": {
      "patterns": [
        {
          "include": "#text_component"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.execute": {
      "begin": "(execute) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control._.command.mcfunction"
        }
      },
      "patterns": [
        {
          "include": "#generated.commands.execute"
        }
      ]
    },
    "generated.commands.execute": {
      "patterns": [
        {
          "include": "#generated.command.execute.run"
        },
        {
          "include": "#generated.command.execute.as"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.execute.run": {
      "begin": "(run)( |(?=\\n))",
      "end": "(?=\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      },
      "patterns": [
        {
          "include": "#generated.commands.execute.run"
        }
      ]
    },
    "generated.commands.execute.run": {
      "patterns": [
        {
          "include": "#generated.commands"
        }
      ]
    },
    "generated.command.execute.as": {
      "begin": "(as) (?=[^\\s\\#])",
      "end": "(?=\\n)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other._.subcommand.mcfunction"
        }
      },
      "patterns": [
        {
          "include": "#generated.commands.execute.as"
        }
      ]
    },
    "generated.commands.execute.as": {
      "patterns": [
        {
          "include": "#generated.command.execute.as.targets"
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.command.execute.as.targets": {
      "patterns": [
        {
          "begin": "(\\@[parse])( |(?=\\n))",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ]
        },
        {
          "begin": "([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\\n))",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.uuid.target.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ]
        },
        {
          "begin": "(\\w+)( |(?=\\n))",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.player_name.target.mcfunction"
            }
          },
          "patterns": [
            {
              "include": "#generated.commands.execute.as.targets"
            }
          ]
        },
        {
          "begin": "(\\@[parse])(\\[)(?= *[\\w\\]])",
          "end": "(?=\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.class._.base.target_selector.mcfunction"
            },
            "2": {
              "name": "support.class._.bracket.target_selector.mcfunction"
            }
          },
          "patterns": [
            {
              "begin": "(\\])( |(?=\\n))",
              "end": "(?=\\n)",
              "beginCaptures": {
                "1": {
                  "name": "support.class._.bracket.target_selector.mcfunction"
                }
              },
              "patterns": [
                {
                  "include": "#generated.commands.execute.as.targets"
                }
              ]
            },
            {
              "include": "#target_selector.content"
            },
            {
              "include": "#error.unknown_command"
            }
          ]
        },
        {
          "include": "#error.unknown_command"
        }
      ]
    },
    "generated.commands.execute.as.targets": {
      "patterns": [
        {
          "include": "#generated.commands.execute"
        }
      ]
    }
  }
}