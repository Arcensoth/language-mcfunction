name: mcfunction-snapshot
scopeName: source.mcfunction-snapshot
fileTypes:
  - mcfunction
patterns:
  - include: '#comment'
  - include: '#command'
  - include: '#unknown'
repository:
  comment:
    patterns:
      - name: meta._.comment.mcfunction
        begin: '^[ \t]*(?=\#)'
        end: \n
        patterns:
          - include: '#comments'
  comments:
    patterns:
      - include: '#comment.heading'
      - include: '#comment.marker'
      - include: '#comment.annotation'
      - include: '#comment.other'
  comment.heading:
    name: meta._.heading.comment.mcfunction
    match: '(##)[ \t]*(.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.heading._.heading.comment.mcfunction
  comment.marker:
    name: meta._.marker.comment.mcfunction
    match: '(#)[ \t]*((?:TODO|FIXME|XXX))(\b.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.bold._.name.marker.comment.mcfunction
      '3':
        name: comment._.text.marker.comment.mcfunction
  comment.annotation:
    name: meta._.annotation.comment.mcfunction
    match: '(#)[ \t]*(\@\w*)(\b.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.heading._.name.annotation.comment.mcfunction
      '3':
        name: comment._.text.annotation.comment.mcfunction
  comment.other:
    name: meta._.other.comment.mcfunction
    match: '(#.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
  command:
    name: meta._.command.mcfunction
    begin: '^[ \t]*(?=[^\s\#])'
    end: \n
    patterns:
      - include: '#commands'
  commands:
    patterns:
      - include: '#generated.commands'
  unknown_command:
    name: meta._.unknown_command.mcfunction
    match: ((.*))$
    captures: &ref_0
      '1':
        name: invalid.illegal._.invalid.mcfunction
      '2':
        name: markup.underline._.underline.mcfunction
  unknown:
    name: meta._.unknown.mcfunction
    match: ^((.*))$
    captures: *ref_0
  entity_selector_arguments:
    patterns:
      - name: meta._.entity_selector.argument_separator.mcfunction
        match: '(?<=[^\[\,])(\,)(?=[^\]\,])'
        captures:
          '1':
            name: support.class._.comma.entity_selector.mcfunction
      - match: '(?<=[\[\,]) +(?=[^\]\,])'
      - match: '(?<=[^\[\,]) +(?=[\]\,])'
      - include: '#generated.selector_arguments'
  generated.commands:
    patterns:
      - include: '#generated.command.execute'
      - include: '#unknown_command'
  generated.command.execute:
    begin: '(execute) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.execute'
  generated.commands.execute:
    patterns:
      - include: '#generated.command.execute.run'
      - include: '#generated.command.execute.as'
      - include: '#unknown_command'
  generated.command.execute.run:
    begin: (run)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.run'
  generated.commands.execute.run:
    patterns:
      - include: '#generated.commands'
  generated.command.execute.as:
    begin: '(as) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.as'
  generated.commands.execute.as:
    patterns:
      - include: '#generated.command.execute.as.targets'
      - include: '#unknown_command'
  generated.command.execute.as.targets:
    patterns:
      - begin: '(\@[a-z])( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.entity_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: (\w+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '(\@[a-z])(\[)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.entity_selector.mcfunction
          '2':
            name: support.class._.bracket.entity_selector.mcfunction
        patterns:
          - begin: '(\])( |(?=\n))'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.entity_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.as.targets'
          - include: '#entity_selector_arguments'
          - include: '#unknown_command'
      - include: '#unknown_command'
  generated.commands.execute.as.targets:
    patterns:
      - include: '#generated.commands.execute'
  generated.selector_arguments:
    patterns:
      - include: '#generated.selector_argument.tag'
      - include: '#generated.selector_argument.sort'
      - include: '#generated.selector_argument.limit_with_local_error_highlighting'
      - include: '#generated.selector_argument.nbt'
  generated.selector_argument.tag:
    patterns:
      - name: meta._.entity_selector.argument.tag.mcfunction
        match: '(tag) *(\=) *(\!?) *(\w+)(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.entity_selector.mcfunction
          '2':
            name: support.class._.equals.entity_selector.mcfunction
          '3':
            name: constant.character.escape._.not.entity_selector.mcfunction
          '4':
            name: string._.word.mcfunction
  generated.selector_argument.sort:
    patterns:
      - name: meta._.entity_selector.argument.sort.mcfunction
        match: '(sort) *(\=) *(arbitrary|furthest|nearest|random)(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.entity_selector.mcfunction
          '2':
            name: support.class._.equals.entity_selector.mcfunction
          '3':
            name: keyword._.word.mcfunction
  generated.selector_argument.limit:
    patterns:
      - name: meta._.entity_selector.argument.limit.mcfunction
        match: '(limit) *(\=) *(\d+)(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.entity_selector.mcfunction
          '2':
            name: support.class._.equals.entity_selector.mcfunction
          '3':
            name: constant.numeric._.numeric_constant.mcfunction
  generated.selector_argument.limit_with_local_error_highlighting:
    patterns:
      - name: meta._.entity_selector.argument.limit.mcfunction
        begin: (limit) *(\=) *
        end: '(?=\n)| *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.entity_selector.mcfunction
          '2':
            name: support.class._.equals.entity_selector.mcfunction
        patterns:
          - match: '(\d+)(?= *[\]\,])'
            name: constant.numeric._.numeric_constant.mcfunction
          - match: '(([^\]\,]*))'
            captures: *ref_0
  generated.selector_argument.nbt:
    patterns:
      - name: meta._.entity_selector.argument.nbt.mcfunction
        begin: '(nbt) *(\=) *(\!?) *(\{)'
        end: '(?=\n)|(\})'
        beginCaptures:
          '1':
            name: keyword.other._.param.entity_selector.mcfunction
          '2':
            name: support.class._.equals.entity_selector.mcfunction
          '3':
            name: constant.character.escape._.not.entity_selector.mcfunction
          '4':
            name: storage._.compound_bracket.nbt.mcfunction
        endCaptures:
          '1':
            name: storage._.compound_bracket.nbt.mcfunction
        contentName: constant.character.escape
