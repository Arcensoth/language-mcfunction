name: mcfunction-snapshot
scopeName: source.mcfunction-snapshot
fileTypes:
  - mcfunction
patterns:
  - include: '#comment.block'
  - include: '#comment.plain'
  - include: '#command'
  - include: '#unknown'
repository:
  comment.plain:
    patterns:
      - name: meta._.plain.comment.mcfunction
        match: '^[ \t]*(#.*)$'
        captures:
          '1':
            name: comment._.plain.comment.mcfunction
  comment.block:
    patterns:
      - name: meta._.block.comment.mcfunction
        begin: '^[ \t]*((#)(>)((.*)))$'
        end: '^(?![ \t]*#)'
        beginCaptures:
          '1':
            name: comment.block._.block.comment.mcfunction
          '2':
            name: markup.list._.symbol.block.comment.mcfunction
          '3':
            name: markup.list._.prefix.block.comment.mcfunction
          '4':
            name: markup.bold._.heading_1.block.comment.mcfunction
          '5':
            name: markup.list._.heading_2.block.comment.mcfunction
        patterns:
          - include: '#comment.block.lines'
  comment.block.lines:
    patterns:
      - name: meta._.lines.block.comment.mcfunction
        begin: '^[ \t]*((#)[ \t]*)'
        end: $
        beginCaptures:
          '1':
            name: comment.block._.block.comment.mcfunction
          '2':
            name: markup.list._.symbol.block.comment.mcfunction
        patterns:
          - include: '#comment.block.line'
  comment.block.line:
    patterns:
      - name: meta._.annotation.line.block.comment.mcfunction
        match: ((\@\w*)\b(.*))$
        captures:
          '1':
            name: comment.block._.block.comment.mcfunction
          '2':
            name: markup.heading._.label.annotation.block.comment.mcfunction
          '3':
            name: comment.block._.text.annotation.block.comment.mcfunction
      - name: meta._.heading.line.block.comment.mcfunction
        match: ((>)((.*)))$
        captures:
          '1':
            name: comment.block._.block.comment.mcfunction
          '2':
            name: markup.list._.prefix.block.comment.mcfunction
          '3':
            name: markup.bold._.heading_1.block.comment.mcfunction
          '4':
            name: markup.list._.heading_2.block.comment.mcfunction
      - name: meta._.text.line.block.comment.mcfunction
        match: (.*)$
        captures:
          '1':
            name: comment.block._.block.comment.mcfunction
  command:
    name: meta._.command.mcfunction
    begin: '^[ \t]*(?=[^\s#])'
    end: \n
    patterns:
      - include: '#commands'
  commands:
    patterns:
      - include: '#generated.commands'
  unknown:
    name: meta._.unknown.mcfunction
    match: ^((.*))$
    captures: &ref_0
      '1':
        name: invalid.illegal._.invalid.mcfunction
      '2':
        name: markup.underline._.underline.mcfunction
  error.invalid_node:
    name: meta._.invalid_node.error.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.unknown_parser:
    name: meta._.unknown_parser.error.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.unmatched_child:
    name: meta._.unmatched_child.error.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.bad_syntax:
    name: meta._.bad_syntax.error.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.command_line:
    name: meta._.unknown_command.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.compound_value:
    patterns:
      - include: '#error.block_value'
      - match: '(([^\n\}\,]))'
        captures: *ref_0
  error.list_value:
    patterns:
      - include: '#error.block_value'
      - match: '(([^\n\]\,]))'
        captures: *ref_0
  error.block_value:
    patterns:
      - include: '#error.dict'
      - include: '#error.list'
      - include: '#error.quoted_string'
  error.block:
    patterns:
      - match: '(([^\n\{\}\[\]\"\'']+))'
        captures: *ref_0
      - include: '#error.block_value'
  error.dict:
    patterns:
      - begin: '((\{))'
        end: '((?=\n)|(\}))'
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.block'
  error.list:
    patterns:
      - begin: '((\[))'
        end: '((?=\n)|(\]))'
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.block'
  error.quoted_string:
    patterns:
      - include: '#error.double_quoted_string'
      - include: '#error.single_quoted_string'
  error.double_quoted_string:
    patterns:
      - begin: ((\"))
        end: ((?=\n)|(\"))
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.double_quoted_string.content'
  error.single_quoted_string:
    patterns:
      - begin: ((\'))
        end: ((?=\n)|(\'))
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.single_quoted_string.content'
  error.double_quoted_string.content:
    patterns:
      - match: '(([^\\\"\n]))'
        captures: *ref_0
      - match: '((\\[^\n]))'
        captures: *ref_0
      - match: ((\\))
        captures: *ref_0
  error.single_quoted_string.content:
    patterns:
      - match: '(([^\\\''\n]))'
        captures: *ref_0
      - match: '((\\[^\n]))'
        captures: *ref_0
      - match: ((\\))
        captures: *ref_0
  common.trailing_whitespace:
    patterns:
      - name: meta._.trailing_whitespace.common.mcfunction
        begin: '[ \t]*'
        end: (?=\n)
        patterns:
          - match: ((\S))
            captures: *ref_0
  common.block:
    patterns:
      - match: '[^\n\{\}\[\]\"\'']+'
        name: string._.content.dict.generic.mcfunction
      - include: '#common.dict'
      - include: '#common.list'
      - include: '#common.quoted_string'
  common.dict:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: &ref_4
          '1':
            name: storage._.bracket.dict.generic.mcfunction
        endCaptures: &ref_5
          '1':
            name: storage._.bracket.dict.generic.mcfunction
        patterns:
          - include: '#common.block'
  common.list:
    patterns:
      - begin: '(\[)'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: storage._.bracket.list.generic.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.list.generic.mcfunction
        patterns:
          - include: '#common.block'
  common.dict.whitespace:
    patterns:
      - match: '(?<=[\{\,]) +(?=[^\}\,])'
      - match: '(?<=[^\{\,]) +(?=[\}\,])'
      - match: '(?<=\{) +(?=\})'
  common.list.whitespace:
    patterns:
      - match: '(?<=[\[\,]) +(?=[^\]\,])'
      - match: '(?<=[^\[\,]) +(?=[\]\,])'
      - match: '(?<=\[) +(?=\])'
  common.boolean:
    patterns:
      - match: (?<!\w)(true|false)(?!\w)
        name: constant.numeric._.boolean.mcfunction
  common.number:
    patterns:
      - match: (?<!\d)(\-?\d*\.?\d+)(?!\d)
        name: constant.numeric._.number.mcfunction
  common.position:
    patterns:
      - include: '#common.position.abs_rel'
      - include: '#common.position.local'
  common.position.abs_rel:
    patterns:
      - match: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
        captures: &ref_6
          '1':
            name: keyword.control._.operator.relative.position.mcfunction
          '2':
            name: constant.numeric._.number.relative.position.mcfunction
          '3':
            name: constant.numeric._.number.absolute.position.mcfunction
          '4':
            name: keyword.control._.operator.relative.position.mcfunction
          '5':
            name: constant.numeric._.number.relative.position.mcfunction
          '6':
            name: constant.numeric._.number.absolute.position.mcfunction
          '7':
            name: keyword.control._.operator.relative.position.mcfunction
          '8':
            name: constant.numeric._.number.relative.position.mcfunction
          '9':
            name: constant.numeric._.number.absolute.position.mcfunction
  common.position.local:
    patterns:
      - match: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)?
        captures: &ref_7
          '1':
            name: keyword.control._.operator.local.position.mcfunction
          '2':
            name: constant.numeric._.number.local.position.mcfunction
          '3':
            name: keyword.control._.operator.local.position.mcfunction
          '4':
            name: constant.numeric._.number.local.position.mcfunction
          '5':
            name: keyword.control._.operator.local.position.mcfunction
          '6':
            name: constant.numeric._.number.local.position.mcfunction
  common.unquoted_string:
    patterns:
      - match: '([\w\.\-\+]+)'
        name: string._.word.mcfunction
  common.double_quoted_string:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: &ref_1
          '1':
            name: string._.string.mcfunction
        endCaptures: &ref_2
          '1':
            name: string._.string.mcfunction
        patterns:
          - include: '#common.double_quoted_string.content'
  common.single_quoted_string:
    patterns:
      - begin: (\')
        end: (?=\n)|(\')
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#common.single_quoted_string.content'
  common.double_quoted_string.content:
    patterns:
      - match: '[^\\\"\n]'
        name: string._.string.mcfunction
      - match: '\\[^\n]'
        name: constant.character.escape._.string_escape.mcfunction
      - match: ((\\))
        captures: *ref_0
  common.single_quoted_string.content:
    patterns:
      - match: '[^\\\''\n]'
        name: string._.string.mcfunction
      - match: '\\[^\n]'
        name: constant.character.escape._.string_escape.mcfunction
      - match: ((\\))
        captures: *ref_0
  common.quoted_string:
    patterns:
      - include: '#common.double_quoted_string'
      - include: '#common.single_quoted_string'
  common.quotable_string:
    patterns:
      - include: '#common.quoted_string'
      - include: '#common.unquoted_string'
  common.integer_range:
    patterns:
      - match: (\-?\d*)(\.\.)(\-?\d*)?
        captures: &ref_3
          '1':
            name: constant.numeric._.minimum.range.mcfunction
          '2':
            name: keyword.control._.ellipsis.range.mcfunction
          '3':
            name: constant.numeric._.maximum.range.mcfunction
      - match: (\-?\d*)?(\.\.)(\-?\d*)
        captures: *ref_3
      - match: (\-?\d*)
        name: constant.numeric._.number.mcfunction
  common.double_range:
    patterns:
      - match: (\-?\d*\.?\d+)(\.\.)(\-?\d*\.?\d+)?
        captures: *ref_3
      - match: (\-?\d*\.?\d+)?(\.\.)(\-?\d*\.?\d+)
        captures: *ref_3
      - match: (\-?\d*\.?\d+)
        name: constant.numeric._.number.mcfunction
  common.resource_id:
    patterns:
      - match: '(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)'
        captures: &ref_11
          '1':
            name: entity.name.function._.namespace.resource_location.mcfunction
          '2':
            name: entity.name.function._.colon.resource_location.mcfunction
          '3':
            name: entity.name.function._.path.resource_location.mcfunction
  common.resource_location:
    patterns:
      - match: '(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)'
        captures: &ref_12
          '1':
            name: entity.name.function._.namespace.resource_location.mcfunction
          '2':
            name: entity.name.function._.colon.resource_location.mcfunction
          '3':
            name: entity.name.function._.path.resource_location.mcfunction
          '4':
            name: entity.name.function._.path.resource_location.mcfunction
  common.tagged_resource_location:
    patterns:
      - match: '(\#)(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)'
        captures: &ref_13
          '1':
            name: entity.name.function._.hash.tagged_resource_location.mcfunction
          '2':
            name: >-
              entity.name.function._.namespace.tagged_resource_location.mcfunction
          '3':
            name: entity.name.function._.colon.tagged_resource_location.mcfunction
          '4':
            name: entity.name.function._.path.tagged_resource_location.mcfunction
          '5':
            name: entity.name.function._.path.tagged_resource_location.mcfunction
  common.taggable_resource_location:
    patterns:
      - include: '#common.tagged_resource_location'
      - include: '#common.resource_location'
  common.message:
    patterns:
      - match: '([^\@\n]+)'
        name: string._.string.mcfunction
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        endCaptures:
          '1':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - include: '#target_selector.content'
          - include: '#error.command_line'
      - match: '(\@[parse])'
        name: support.class._.base.target_selector.mcfunction
      - match: '([^\n])'
        name: string._.string.mcfunction
  nbt.compound:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_4
        endCaptures: *ref_5
        patterns:
          - include: '#nbt.compound.content'
  nbt.compound.content:
    patterns:
      - include: '#common.block'
  nbt_path:
    patterns:
      - include: '#common.double_quoted_string.content'
  score_map.content:
    patterns:
      - include: '#common.block'
  advancement_map.content:
    patterns:
      - include: '#common.block'
  text_component:
    patterns:
      - include: '#text_component.boolean'
      - include: '#text_component.number'
      - include: '#text_component.string'
      - include: '#text_component.list'
      - include: '#text_component.dict'
  text_component.boolean:
    patterns:
      - include: '#common.boolean'
  text_component.number:
    patterns:
      - include: '#common.number'
  text_component.string:
    patterns:
      - include: '#common.double_quoted_string'
  text_component.atomic:
    patterns:
      - include: '#text_component.boolean'
      - include: '#text_component.number'
      - include: '#text_component.string'
  text_component.string.color:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: >-
              (black|dark_blue|dark_green|dark_aqua|dark_red|dark_purple|gold|gray|dark_gray|blue|green|aqua|red|light_purple|yellow|white)
            name: string._.color.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.string.keybind:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: >-
              (key\.forward|key\.left|key\.back|key\.right|key\.jump|key\.sneak|key\.sprint|key\.inventory|key\.swapHands|key\.drop|key\.use|key\.attack|key\.pickItem|key\.chat|key\.playerlist|key\.command|key\.screenshot|key\.togglePerspective|key\.smoothCamera|key\.fullscreen|key\.spectatorOutlines|key\.hotbar\.1|key\.hotbar\.2|key\.hotbar\.3|key\.hotbar\.4|key\.hotbar\.5|key\.hotbar\.6|key\.hotbar\.7|key\.hotbar\.8|key\.hotbar\.9|key\.saveToolbarActivator|key\.loadToolbarActivator)
            name: string._.keybind.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.command_string:
    patterns:
      - begin: (\")(\/)
        end: (?=\n)|(\")
        beginCaptures:
          '1':
            name: string._.string.mcfunction
          '2':
            name: keyword.control._.command.mcfunction
        endCaptures: *ref_2
        patterns:
          - include: '#commands'
  text_component.string.target:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.target.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.target.content:
    patterns:
      - match: '(?<=\")(\@[parse])(?=\")'
        name: support.class._.base.target_selector.mcfunction
      - match: '(?<=\")([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\")'
        name: support.class._.uuid.target.mcfunction
      - match: (?<=\")(\w+)(?=\")
        name: support.class._.player_name.target.mcfunction
      - begin: '(?<=\")(\@[parse])(\[)(?= *[\w\]])'
        end: '(?=\n)|(?=\")|(\])(?=\")'
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        endCaptures:
          '1':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - include: '#target_selector.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.nbt:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.nbt.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.nbt.content:
    patterns:
      - include: '#nbt_path'
  text_component.string.position:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.position.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.position.content:
    patterns:
      - match: >-
          (?<=\")(?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))(?=\")
        captures: *ref_6
      - match: >-
          (?<=\")(\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)?
          (\^)(\-?\d*\.?\d+)?(?=\")
        captures: *ref_7
  text_component.string.score_holder:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.score_holder.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.score_holder.content:
    patterns:
      - match: (?<=\")(\*)(?=\")
        name: support.class._.all.score_holder.mcfunction
      - match: '(?<=\")([\w\.\-\#\$\%]+)(?=\")'
        name: support.class._.fakeplayer.score_holder.mcfunction
      - include: '#text_component.string.target.content'
  text_component.string.objective:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.objective.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.objective.content:
    patterns:
      - match: '(?<=\")([\w\.\-\+]+)(?=\")'
        name: entity.other.attribute-name._.scoreboard_objective.mcfunction
  text_component.string.click_event:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: (open_url|open_file|run_command|suggest_command|change_page)
            name: string._.event.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.string.hover_event:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: (show_text|show_item|show_entity)
            name: string._.event.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.nbt_compound_string:
    patterns:
      - begin: '(\")(?=\{)'
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#nbt.compound'
  text_component.list_common:
    patterns:
      - match: '(?<=[^\[\,])(\,)(?=[^\]\,])'
        captures:
          '1':
            name: storage._.comma.text_component.mcfunction
      - include: '#common.list.whitespace'
  text_component.list:
    patterns:
      - begin: '(\[)'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: storage._.bracket.text_component.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.text_component.mcfunction
        patterns:
          - include: '#text_component.list_common'
          - include: '#text_component.list_values'
  text_component.list_values:
    patterns:
      - include: '#text_component'
      - include: '#error.list_value'
  text_component.dict_common:
    patterns:
      - match: '(?<=[^\{\,])(\,)(?=[^\}\,])'
        captures:
          '1':
            name: storage._.comma.text_component.mcfunction
      - include: '#common.dict.whitespace'
  text_component.dict:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: &ref_8
          '1':
            name: storage._.bracket.text_component.mcfunction
        endCaptures: &ref_9
          '1':
            name: storage._.bracket.text_component.mcfunction
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties'
  text_component.dict.score:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.score'
  text_component.dict.click_event:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.click_event'
  text_component.dict.hover_event:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.hover_event'
  text_component.properties:
    patterns:
      - include: '#text_component.property.b_i_u_s_o'
      - include: '#text_component.property.color'
      - include: '#text_component.property.text_translate'
      - include: '#text_component.property.extra_with'
      - include: '#text_component.property.selector'
      - include: '#text_component.property.score'
      - include: '#text_component.property.keybind'
      - include: '#text_component.property.insertion'
      - include: '#text_component.property.click_event'
      - include: '#text_component.property.hover_event'
      - include: '#text_component.property.nbt'
      - include: '#text_component.property.entity'
      - include: '#text_component.property.block'
      - include: '#text_component.property.interpret'
      - include: '#error.compound_value'
  text_component.property.b_i_u_s_o:
    patterns:
      - begin: >-
          (\")(bold|italic|underlined|strikethrough|obfuscated)(\") *(\:)
          *(?=[^\s\,\}])
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: &ref_10
          '1':
            name: string._.string.mcfunction
          '2':
            name: string._.property.text_component.mcfunction
          '3':
            name: string._.string.mcfunction
          '4':
            name: storage._.compound_colon.nbt.mcfunction
        patterns:
          - include: '#text_component.boolean'
          - include: '#error.compound_value'
  text_component.property.text_translate:
    patterns:
      - begin: '(\")(text|translate)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.atomic'
          - include: '#error.compound_value'
  text_component.property.color:
    patterns:
      - begin: '(\")(color)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.color'
          - include: '#error.compound_value'
  text_component.property.extra_with:
    patterns:
      - begin: '(\")(extra|with)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.list'
          - include: '#error.compound_value'
  text_component.property.selector:
    patterns:
      - begin: '(\")(selector)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.target'
          - include: '#error.compound_value'
  text_component.property.score:
    patterns:
      - begin: '(\")(score)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.score'
          - include: '#error.compound_value'
  text_component.property.keybind:
    patterns:
      - begin: '(\")(keybind)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.keybind'
          - include: '#error.compound_value'
  text_component.property.insertion:
    patterns:
      - begin: '(\")(insertion)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.command_string'
          - include: '#text_component.string'
          - include: '#error.compound_value'
  text_component.property.click_event:
    patterns:
      - begin: '(\")(clickEvent)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.click_event'
          - include: '#error.compound_value'
  text_component.property.hover_event:
    patterns:
      - begin: '(\")(hoverEvent)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.hover_event'
          - include: '#error.compound_value'
  text_component.property.nbt:
    patterns:
      - begin: '(\")(nbt)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.nbt'
          - include: '#error.compound_value'
  text_component.property.entity:
    patterns:
      - begin: '(\")(entity)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.target'
          - include: '#error.compound_value'
  text_component.property.block:
    patterns:
      - begin: '(\")(block)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.position'
          - include: '#error.compound_value'
  text_component.property.interpret:
    patterns:
      - begin: '(\")(interpret)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.boolean'
          - include: '#error.compound_value'
  text_component.properties.score:
    patterns:
      - include: '#text_component.property.score.name'
      - include: '#text_component.property.score.objective'
      - include: '#text_component.property.score.value'
      - include: '#error.compound_value'
  text_component.property.score.name:
    patterns:
      - begin: '(\")(name)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.score_holder'
          - include: '#error.compound_value'
  text_component.property.score.objective:
    patterns:
      - begin: '(\")(objective)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.objective'
          - include: '#error.compound_value'
  text_component.property.score.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.atomic'
          - include: '#error.compound_value'
  text_component.properties.click_event:
    patterns:
      - include: '#text_component.property.click_event.action'
      - include: '#text_component.property.click_event.value'
      - include: '#error.compound_value'
  text_component.property.click_event.action:
    patterns:
      - begin: '(\")(action)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.click_event'
          - include: '#error.compound_value'
  text_component.property.click_event.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.command_string'
          - include: '#text_component.string'
          - include: '#error.compound_value'
  text_component.properties.hover_event:
    patterns:
      - include: '#text_component.property.hover_event.action'
      - include: '#text_component.property.hover_event.value'
      - include: '#error.compound_value'
  text_component.property.hover_event.action:
    patterns:
      - begin: '(\")(action)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.hover_event'
          - include: '#error.compound_value'
  text_component.property.hover_event.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.nbt_compound_string'
          - include: '#text_component'
          - include: '#error.compound_value'
  target_selector.content:
    patterns:
      - name: meta._.argument_separator.content.target_selector.mcfunction
        match: '(?<=[^\[\,])(\,)(?= *\w)'
        captures:
          '1':
            name: support.class._.comma.target_selector.mcfunction
      - match: '(?<=[\[\,]) +(?=\w)'
      - match: '(?<=[^\[\,]) +(?=[\]\,])'
      - match: '(?<=\[) +(?=\])'
      - include: '#target_selector.arguments'
  target_selector.arguments:
    patterns:
      - include: '#target_selector.content.argument.xyz'
      - include: '#target_selector.content.argument.dxyz'
      - include: '#target_selector.content.argument.xy_rotation'
      - include: '#target_selector.content.argument.distance'
      - include: '#target_selector.content.argument.team'
      - include: '#target_selector.content.argument.tag'
      - include: '#target_selector.content.argument.name'
      - include: '#target_selector.content.argument.type'
      - include: '#target_selector.content.argument.level'
      - include: '#target_selector.content.argument.gamemode'
      - include: '#target_selector.content.argument.sort'
      - include: '#target_selector.content.argument.limit'
      - include: '#target_selector.content.argument.scores'
      - include: '#target_selector.content.argument.advancements'
      - include: '#target_selector.content.argument.nbt'
  target_selector.content.argument.xyz:
    patterns:
      - name: meta._.xyz.argument.content.target_selector.mcfunction
        match: '(x|y|z) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.dxyz:
    patterns:
      - name: meta._.dxyz.argument.content.target_selector.mcfunction
        match: '(dx|dy|dz) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.xy_rotation:
    patterns:
      - name: meta._.xy_rotation.argument.content.target_selector.mcfunction
        begin: '(x_rotation|y_rotation) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.double_range'
          - include: '#error.command_line'
  target_selector.content.argument.distance:
    patterns:
      - name: meta._.distance.argument.content.target_selector.mcfunction
        begin: '(distance) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.double_range'
          - include: '#error.command_line'
  target_selector.content.argument.team:
    patterns:
      - name: meta._.team.argument.content.target_selector.mcfunction
        match: '(team) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: entity.other.attribute-name._.scoreboard_team.mcfunction
  target_selector.content.argument.tag:
    patterns:
      - name: meta._.tag.argument.content.target_selector.mcfunction
        match: '(tag) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: entity.other.attribute-name._.entity_tag.mcfunction
  target_selector.content.argument.name:
    patterns:
      - name: meta._.name.argument.content.target_selector.mcfunction
        begin: (name) *(\=) *(\!?) *
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
        patterns:
          - include: '#common.quotable_string'
          - include: '#error.command_line'
  target_selector.content.argument.type:
    patterns:
      - name: meta._.type.argument.content.target_selector.mcfunction
        begin: '(type) *(\=) *(\!?) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
        patterns:
          - include: '#common.taggable_resource_location'
          - include: '#error.command_line'
  target_selector.content.argument.level:
    patterns:
      - name: meta._.level.argument.content.target_selector.mcfunction
        begin: '(level) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.integer_range'
          - include: '#error.command_line'
  target_selector.content.argument.gamemode:
    patterns:
      - name: meta._.gamemode.argument.content.target_selector.mcfunction
        match: >-
          (gamemode) *(\=) *(\!?) *(survival|creative|adventure|spectator)
          *(?=[\]\,])
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: keyword._.keyword.mcfunction
  target_selector.content.argument.sort:
    patterns:
      - name: meta._.sort.argument.content.target_selector.mcfunction
        match: '(sort) *(\=) *(arbitrary|furthest|nearest|random) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: keyword._.keyword.mcfunction
  target_selector.content.argument.limit:
    patterns:
      - name: meta._.limit.argument.content.target_selector.mcfunction
        match: '(limit) *(\=) *(0*[1-9]\d*) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.scores:
    patterns:
      - name: meta._.scores.argument.content.target_selector.mcfunction
        begin: '(scores) *(\=) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: storage._.bracket.score_map.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.score_map.mcfunction
        patterns:
          - include: '#score_map.content'
  target_selector.content.argument.advancements:
    patterns:
      - name: meta._.advancements.argument.content.target_selector.mcfunction
        begin: '(advancements) *(\=) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: storage._.bracket.advancement_map.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.advancement_map.mcfunction
        patterns:
          - include: '#advancement_map.content'
  target_selector.content.argument.nbt:
    patterns:
      - name: meta._.nbt.argument.content.target_selector.mcfunction
        begin: '(nbt) *(\=) *(\!?) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: storage._.compound_bracket.nbt.mcfunction
        endCaptures:
          '1':
            name: storage._.compound_bracket.nbt.mcfunction
        patterns:
          - include: '#nbt.compound.content'
  generated.commands:
    patterns:
      - include: '#generated.command.effect'
      - include: '#generated.command.execute'
      - include: '#generated.command.function'
      - include: '#generated.command.say'
      - include: '#generated.command.tellraw'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect:
    begin: (effect) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.effect'
  generated.commands.effect:
    patterns:
      - include: '#generated.command.effect.clear'
      - include: '#generated.command.effect.give'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.clear:
    begin: (clear) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.effect.clear'
  generated.commands.effect.clear:
    patterns:
      - include: '#generated.command.effect.clear.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.clear.targets:
    patterns:
      - begin: '(\@[parse])( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.effect.clear.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.effect.clear.targets'
      - begin: (\w+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.effect.clear.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\])( |(?=\n))'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.effect.clear.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.effect.clear.targets:
    patterns:
      - include: '#generated.command.effect.clear.targets.effect'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.clear.targets.effect:
    patterns:
      - begin: '(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_11
        patterns:
          - include: '#generated.commands.effect.clear.targets.effect'
  generated.commands.effect.clear.targets.effect:
    patterns:
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give:
    begin: (give) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.effect.give'
  generated.commands.effect.give:
    patterns:
      - include: '#generated.command.effect.give.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.effect.give.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.effect.give.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.effect.give.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.effect.give.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.effect.give.targets:
    patterns:
      - include: '#generated.command.effect.give.targets.effect'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give.targets.effect:
    patterns:
      - begin: '(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_11
        patterns:
          - include: '#generated.commands.effect.give.targets.effect'
  generated.commands.effect.give.targets.effect:
    patterns:
      - include: '#generated.command.effect.give.targets.effect.seconds'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give.targets.effect.seconds:
    patterns:
      - begin: '(0*[1-9]\d*)( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: constant.numeric._.number.mcfunction
        patterns:
          - include: '#generated.commands.effect.give.targets.effect.seconds'
  generated.commands.effect.give.targets.effect.seconds:
    patterns:
      - include: '#generated.command.effect.give.targets.effect.seconds.amplifier'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give.targets.effect.seconds.amplifier:
    patterns:
      - begin: (\d+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: constant.numeric._.number.mcfunction
        patterns:
          - include: '#generated.commands.effect.give.targets.effect.seconds.amplifier'
  generated.commands.effect.give.targets.effect.seconds.amplifier:
    patterns:
      - include: >-
          #generated.command.effect.give.targets.effect.seconds.amplifier.hideParticles
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.effect.give.targets.effect.seconds.amplifier.hideParticles:
    patterns:
      - begin: (true|false)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: constant.numeric._.boolean.mcfunction
        patterns:
          - include: >-
              #generated.commands.effect.give.targets.effect.seconds.amplifier.hideParticles
  generated.commands.effect.give.targets.effect.seconds.amplifier.hideParticles:
    patterns:
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute:
    begin: (execute) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.execute'
  generated.commands.execute:
    patterns:
      - include: '#generated.command.execute.align'
      - include: '#generated.command.execute.anchored'
      - include: '#generated.command.execute.as'
      - include: '#generated.command.execute.at'
      - include: '#generated.command.execute.facing'
      - include: '#generated.command.execute.if'
      - include: '#generated.command.execute.in'
      - include: '#generated.command.execute.positioned'
      - include: '#generated.command.execute.rotated'
      - include: '#generated.command.execute.run'
      - include: '#generated.command.execute.store'
      - include: '#generated.command.execute.unless'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.align:
    begin: (align) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.align'
  generated.commands.execute.align:
    patterns:
      - include: '#generated.command.execute.align.axes'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.align.axes:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.align.axes:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.anchored:
    begin: (anchored) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.anchored'
  generated.commands.execute.anchored:
    patterns:
      - include: '#generated.command.execute.anchored.anchor'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.anchored.anchor:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.anchored.anchor:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.as:
    begin: (as) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.as'
  generated.commands.execute.as:
    patterns:
      - include: '#generated.command.execute.as.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.as.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.as.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.as.targets:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.at:
    begin: (at) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.at'
  generated.commands.execute.at:
    patterns:
      - include: '#generated.command.execute.at.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.at.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.at.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.at.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.at.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.at.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.at.targets:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.facing:
    begin: (facing) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.facing'
  generated.commands.execute.facing:
    patterns:
      - include: '#generated.command.execute.facing.entity'
      - include: '#generated.command.execute.facing.pos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.facing.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.facing.entity'
  generated.commands.execute.facing.entity:
    patterns:
      - include: '#generated.command.execute.facing.entity.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.facing.entity.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.facing.entity.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.facing.entity.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.facing.entity.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.facing.entity.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.facing.entity.targets:
    patterns:
      - include: '#generated.command.execute.facing.entity.targets.anchor'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.facing.entity.targets.anchor:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.facing.entity.targets.anchor:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.facing.pos:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.facing.pos:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if:
    begin: (if) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if'
  generated.commands.execute.if:
    patterns:
      - include: '#generated.command.execute.if.block'
      - include: '#generated.command.execute.if.blocks'
      - include: '#generated.command.execute.if.data'
      - include: '#generated.command.execute.if.entity'
      - include: '#generated.command.execute.if.predicate'
      - include: '#generated.command.execute.if.score'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.block'
  generated.commands.execute.if.block:
    patterns:
      - include: '#generated.command.execute.if.block.pos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.block.pos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.if.block.pos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.if.block.pos'
  generated.commands.execute.if.block.pos:
    patterns:
      - include: '#generated.command.execute.if.block.pos.block'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.block.pos.block:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.if.block.pos.block'
      - begin: >-
          (\#)(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_13
        patterns:
          - include: '#generated.commands.execute.if.block.pos.block'
  generated.commands.execute.if.block.pos.block:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks:
    begin: (blocks) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.blocks'
  generated.commands.execute.if.blocks:
    patterns:
      - include: '#generated.command.execute.if.blocks.start'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks.start:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.if.blocks.start'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.if.blocks.start'
  generated.commands.execute.if.blocks.start:
    patterns:
      - include: '#generated.command.execute.if.blocks.start.end'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks.start.end:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.if.blocks.start.end'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.if.blocks.start.end'
  generated.commands.execute.if.blocks.start.end:
    patterns:
      - include: '#generated.command.execute.if.blocks.start.end.destination'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks.start.end.destination:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.if.blocks.start.end.destination'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.if.blocks.start.end.destination'
  generated.commands.execute.if.blocks.start.end.destination:
    patterns:
      - include: '#generated.command.execute.if.blocks.start.end.destination.all'
      - include: '#generated.command.execute.if.blocks.start.end.destination.masked'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks.start.end.destination.all:
    begin: (all)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.blocks.start.end.destination.all'
  generated.commands.execute.if.blocks.start.end.destination.all:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.blocks.start.end.destination.masked:
    begin: (masked)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.blocks.start.end.destination.masked'
  generated.commands.execute.if.blocks.start.end.destination.masked:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data:
    begin: (data) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.data'
  generated.commands.execute.if.data:
    patterns:
      - include: '#generated.command.execute.if.data.block'
      - include: '#generated.command.execute.if.data.entity'
      - include: '#generated.command.execute.if.data.storage'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.data.block'
  generated.commands.execute.if.data.block:
    patterns:
      - include: '#generated.command.execute.if.data.block.sourcePos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.block.sourcePos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.if.data.block.sourcePos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.if.data.block.sourcePos'
  generated.commands.execute.if.data.block.sourcePos:
    patterns:
      - include: '#generated.command.execute.if.data.block.sourcePos.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.block.sourcePos.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.if.data.block.sourcePos.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.data.entity'
  generated.commands.execute.if.data.entity:
    patterns:
      - include: '#generated.command.execute.if.data.entity.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.entity.source:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.data.entity.source'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.data.entity.source'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.data.entity.source'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.if.data.entity.source'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.data.entity.source:
    patterns:
      - include: '#generated.command.execute.if.data.entity.source.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.entity.source.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.if.data.entity.source.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.storage:
    begin: (storage) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.data.storage'
  generated.commands.execute.if.data.storage:
    patterns:
      - include: '#generated.command.execute.if.data.storage.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.storage.source:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.if.data.storage.source'
  generated.commands.execute.if.data.storage.source:
    patterns:
      - include: '#generated.command.execute.if.data.storage.source.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.data.storage.source.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.if.data.storage.source.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.entity'
  generated.commands.execute.if.entity:
    patterns:
      - include: '#generated.command.execute.if.entity.entities'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.entity.entities:
    patterns:
      - begin: '(\@[parse])( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.entity.entities'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.entity.entities'
      - begin: (\w+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.entity.entities'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\])( |(?=\n))'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.if.entity.entities'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.entity.entities:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.predicate:
    begin: (predicate) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.predicate'
  generated.commands.execute.if.predicate:
    patterns:
      - include: '#generated.command.execute.if.predicate.predicate'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.predicate.predicate:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.if.predicate.predicate'
  generated.commands.execute.if.predicate.predicate:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score:
    begin: (score) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score'
  generated.commands.execute.if.score:
    patterns:
      - include: '#generated.command.execute.if.score.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: &ref_14
          '1':
            name: support.class._.all.score_holder.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target'
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: &ref_15
          '1':
            name: support.class._.fakeplayer.score_holder.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target'
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.if.score.target'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective:
    patterns:
      - begin: '([\w\.\-\+]+) (?=\S)'
        end: (?=\n)
        beginCaptures: &ref_16
          '1':
            name: entity.other.attribute-name._.scoreboard_objective.mcfunction
        patterns:
          - include: '#generated.commands.execute.if.score.target.targetObjective'
  generated.commands.execute.if.score.target.targetObjective:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.<'
      - include: '#generated.command.execute.if.score.target.targetObjective.<='
      - include: '#generated.command.execute.if.score.target.targetObjective.='
      - include: '#generated.command.execute.if.score.target.targetObjective.>'
      - include: '#generated.command.execute.if.score.target.targetObjective.>='
      - include: '#generated.command.execute.if.score.target.targetObjective.matches'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<:
    begin: (<) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.<'
  generated.commands.execute.if.score.target.targetObjective.<:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.<.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.if.score.target.targetObjective.<.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target.targetObjective.<.source:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.<.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<.source.sourceObjective
  generated.commands.execute.if.score.target.targetObjective.<.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<=:
    begin: (<=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.<='
  generated.commands.execute.if.score.target.targetObjective.<=:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.<=.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.if.score.target.targetObjective.<=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target.targetObjective.<=.source:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.<=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.<=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.<=.source.sourceObjective
  generated.commands.execute.if.score.target.targetObjective.<=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.=:
    begin: (=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.='
  generated.commands.execute.if.score.target.targetObjective.=:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.=.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.if.score.target.targetObjective.=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target.targetObjective.=.source:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.=.source.sourceObjective
  generated.commands.execute.if.score.target.targetObjective.=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>:
    begin: (>) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.>'
  generated.commands.execute.if.score.target.targetObjective.>:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.>.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.if.score.target.targetObjective.>.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target.targetObjective.>.source:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.>.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>.source.sourceObjective
  generated.commands.execute.if.score.target.targetObjective.>.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>=:
    begin: (>=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.>='
  generated.commands.execute.if.score.target.targetObjective.>=:
    patterns:
      - include: '#generated.command.execute.if.score.target.targetObjective.>=.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.if.score.target.targetObjective.>=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.if.score.target.targetObjective.>=.source:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.>=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.>=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.if.score.target.targetObjective.>=.source.sourceObjective
  generated.commands.execute.if.score.target.targetObjective.>=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.matches:
    begin: (matches) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.if.score.target.targetObjective.matches'
  generated.commands.execute.if.score.target.targetObjective.matches:
    patterns:
      - include: >-
          #generated.command.execute.if.score.target.targetObjective.matches.range
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.if.score.target.targetObjective.matches.range:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.if.score.target.targetObjective.matches.range:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.in:
    begin: (in) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.in'
  generated.commands.execute.in:
    patterns:
      - include: '#generated.command.execute.in.dimension'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.in.dimension:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.in.dimension:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.positioned:
    begin: (positioned) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.positioned'
  generated.commands.execute.positioned:
    patterns:
      - include: '#generated.command.execute.positioned.as'
      - include: '#generated.command.execute.positioned.pos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.positioned.as:
    begin: (as) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.positioned.as'
  generated.commands.execute.positioned.as:
    patterns:
      - include: '#generated.command.execute.positioned.as.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.positioned.as.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.positioned.as.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.positioned.as.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.positioned.as.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.positioned.as.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.positioned.as.targets:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.positioned.pos:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.positioned.pos:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.rotated:
    begin: (rotated) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.rotated'
  generated.commands.execute.rotated:
    patterns:
      - include: '#generated.command.execute.rotated.as'
      - include: '#generated.command.execute.rotated.rot'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.rotated.as:
    begin: (as) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.rotated.as'
  generated.commands.execute.rotated.as:
    patterns:
      - include: '#generated.command.execute.rotated.as.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.rotated.as.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.rotated.as.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.rotated.as.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.rotated.as.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.rotated.as.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.rotated.as.targets:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.rotated.rot:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.rotated.rot:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.run:
    begin: (run) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.run'
  generated.commands.execute.run:
    patterns:
      - include: '#generated.commands'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store:
    begin: (store) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store'
  generated.commands.execute.store:
    patterns:
      - include: '#generated.command.execute.store.result'
      - include: '#generated.command.execute.store.success'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result:
    begin: (result) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result'
  generated.commands.execute.store.result:
    patterns:
      - include: '#generated.command.execute.store.result.block'
      - include: '#generated.command.execute.store.result.bossbar'
      - include: '#generated.command.execute.store.result.entity'
      - include: '#generated.command.execute.store.result.score'
      - include: '#generated.command.execute.store.result.storage'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block'
  generated.commands.execute.store.result.block:
    patterns:
      - include: '#generated.command.execute.store.result.block.targetPos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.store.result.block.targetPos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.store.result.block.targetPos'
  generated.commands.execute.store.result.block.targetPos:
    patterns:
      - include: '#generated.command.execute.store.result.block.targetPos.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.result.block.targetPos.path:
    patterns:
      - include: '#generated.command.execute.store.result.block.targetPos.path.byte'
      - include: '#generated.command.execute.store.result.block.targetPos.path.double'
      - include: '#generated.command.execute.store.result.block.targetPos.path.float'
      - include: '#generated.command.execute.store.result.block.targetPos.path.int'
      - include: '#generated.command.execute.store.result.block.targetPos.path.long'
      - include: '#generated.command.execute.store.result.block.targetPos.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.byte'
  generated.commands.execute.store.result.block.targetPos.path.byte:
    patterns:
      - include: >-
          #generated.command.execute.store.result.block.targetPos.path.byte.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: &ref_17
          '1':
            name: constant.numeric._.number.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.byte.scale
  generated.commands.execute.store.result.block.targetPos.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.double'
  generated.commands.execute.store.result.block.targetPos.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.result.block.targetPos.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.double.scale
  generated.commands.execute.store.result.block.targetPos.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.float'
  generated.commands.execute.store.result.block.targetPos.path.float:
    patterns:
      - include: >-
          #generated.command.execute.store.result.block.targetPos.path.float.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.float.scale
  generated.commands.execute.store.result.block.targetPos.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.int'
  generated.commands.execute.store.result.block.targetPos.path.int:
    patterns:
      - include: '#generated.command.execute.store.result.block.targetPos.path.int.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.int.scale
  generated.commands.execute.store.result.block.targetPos.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.long'
  generated.commands.execute.store.result.block.targetPos.path.long:
    patterns:
      - include: >-
          #generated.command.execute.store.result.block.targetPos.path.long.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.long.scale
  generated.commands.execute.store.result.block.targetPos.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.block.targetPos.path.short'
  generated.commands.execute.store.result.block.targetPos.path.short:
    patterns:
      - include: >-
          #generated.command.execute.store.result.block.targetPos.path.short.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.block.targetPos.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.block.targetPos.path.short.scale
  generated.commands.execute.store.result.block.targetPos.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.bossbar:
    begin: (bossbar) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.bossbar'
  generated.commands.execute.store.result.bossbar:
    patterns:
      - include: '#generated.command.execute.store.result.bossbar.id'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.bossbar.id:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.store.result.bossbar.id'
  generated.commands.execute.store.result.bossbar.id:
    patterns:
      - include: '#generated.command.execute.store.result.bossbar.id.max'
      - include: '#generated.command.execute.store.result.bossbar.id.value'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.bossbar.id.max:
    begin: (max) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.bossbar.id.max'
  generated.commands.execute.store.result.bossbar.id.max:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.bossbar.id.value:
    begin: (value) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.bossbar.id.value'
  generated.commands.execute.store.result.bossbar.id.value:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity'
  generated.commands.execute.store.result.entity:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.entity.target'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.entity.target'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.entity.target'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.store.result.entity.target'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.store.result.entity.target:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.result.entity.target.path:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.byte'
      - include: '#generated.command.execute.store.result.entity.target.path.double'
      - include: '#generated.command.execute.store.result.entity.target.path.float'
      - include: '#generated.command.execute.store.result.entity.target.path.int'
      - include: '#generated.command.execute.store.result.entity.target.path.long'
      - include: '#generated.command.execute.store.result.entity.target.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.byte'
  generated.commands.execute.store.result.entity.target.path.byte:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.byte.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.byte.scale
  generated.commands.execute.store.result.entity.target.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.double'
  generated.commands.execute.store.result.entity.target.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.result.entity.target.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.double.scale
  generated.commands.execute.store.result.entity.target.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.float'
  generated.commands.execute.store.result.entity.target.path.float:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.float.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.float.scale
  generated.commands.execute.store.result.entity.target.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.int'
  generated.commands.execute.store.result.entity.target.path.int:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.int.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.int.scale
  generated.commands.execute.store.result.entity.target.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.long'
  generated.commands.execute.store.result.entity.target.path.long:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.long.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.long.scale
  generated.commands.execute.store.result.entity.target.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.entity.target.path.short'
  generated.commands.execute.store.result.entity.target.path.short:
    patterns:
      - include: '#generated.command.execute.store.result.entity.target.path.short.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.entity.target.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.entity.target.path.short.scale
  generated.commands.execute.store.result.entity.target.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.score:
    begin: (score) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.score'
  generated.commands.execute.store.result.score:
    patterns:
      - include: '#generated.command.execute.store.result.score.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.score.targets:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets'
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets'
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.store.result.score.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.store.result.score.targets:
    patterns:
      - include: '#generated.command.execute.store.result.score.targets.objective'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.score.targets.objective:
    patterns:
      - begin: '([\w\.\-\+]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: '#generated.commands.execute.store.result.score.targets.objective'
  generated.commands.execute.store.result.score.targets.objective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage:
    begin: (storage) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage'
  generated.commands.execute.store.result.storage:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.store.result.storage.target'
  generated.commands.execute.store.result.storage.target:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.result.storage.target.path:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target.path.byte'
      - include: '#generated.command.execute.store.result.storage.target.path.double'
      - include: '#generated.command.execute.store.result.storage.target.path.float'
      - include: '#generated.command.execute.store.result.storage.target.path.int'
      - include: '#generated.command.execute.store.result.storage.target.path.long'
      - include: '#generated.command.execute.store.result.storage.target.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.byte'
  generated.commands.execute.store.result.storage.target.path.byte:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target.path.byte.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.byte.scale
  generated.commands.execute.store.result.storage.target.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.double'
  generated.commands.execute.store.result.storage.target.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.result.storage.target.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.double.scale
  generated.commands.execute.store.result.storage.target.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.float'
  generated.commands.execute.store.result.storage.target.path.float:
    patterns:
      - include: >-
          #generated.command.execute.store.result.storage.target.path.float.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.float.scale
  generated.commands.execute.store.result.storage.target.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.int'
  generated.commands.execute.store.result.storage.target.path.int:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target.path.int.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.int.scale
  generated.commands.execute.store.result.storage.target.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.long'
  generated.commands.execute.store.result.storage.target.path.long:
    patterns:
      - include: '#generated.command.execute.store.result.storage.target.path.long.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.long.scale
  generated.commands.execute.store.result.storage.target.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.result.storage.target.path.short'
  generated.commands.execute.store.result.storage.target.path.short:
    patterns:
      - include: >-
          #generated.command.execute.store.result.storage.target.path.short.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.result.storage.target.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.result.storage.target.path.short.scale
  generated.commands.execute.store.result.storage.target.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success:
    begin: (success) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success'
  generated.commands.execute.store.success:
    patterns:
      - include: '#generated.command.execute.store.success.block'
      - include: '#generated.command.execute.store.success.bossbar'
      - include: '#generated.command.execute.store.success.entity'
      - include: '#generated.command.execute.store.success.score'
      - include: '#generated.command.execute.store.success.storage'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block'
  generated.commands.execute.store.success.block:
    patterns:
      - include: '#generated.command.execute.store.success.block.targetPos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.store.success.block.targetPos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.store.success.block.targetPos'
  generated.commands.execute.store.success.block.targetPos:
    patterns:
      - include: '#generated.command.execute.store.success.block.targetPos.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.success.block.targetPos.path:
    patterns:
      - include: '#generated.command.execute.store.success.block.targetPos.path.byte'
      - include: '#generated.command.execute.store.success.block.targetPos.path.double'
      - include: '#generated.command.execute.store.success.block.targetPos.path.float'
      - include: '#generated.command.execute.store.success.block.targetPos.path.int'
      - include: '#generated.command.execute.store.success.block.targetPos.path.long'
      - include: '#generated.command.execute.store.success.block.targetPos.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.byte'
  generated.commands.execute.store.success.block.targetPos.path.byte:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.byte.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.byte.scale
  generated.commands.execute.store.success.block.targetPos.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.double'
  generated.commands.execute.store.success.block.targetPos.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.double.scale
  generated.commands.execute.store.success.block.targetPos.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.float'
  generated.commands.execute.store.success.block.targetPos.path.float:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.float.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.float.scale
  generated.commands.execute.store.success.block.targetPos.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.int'
  generated.commands.execute.store.success.block.targetPos.path.int:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.int.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.int.scale
  generated.commands.execute.store.success.block.targetPos.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.long'
  generated.commands.execute.store.success.block.targetPos.path.long:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.long.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.long.scale
  generated.commands.execute.store.success.block.targetPos.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.block.targetPos.path.short'
  generated.commands.execute.store.success.block.targetPos.path.short:
    patterns:
      - include: >-
          #generated.command.execute.store.success.block.targetPos.path.short.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.block.targetPos.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.block.targetPos.path.short.scale
  generated.commands.execute.store.success.block.targetPos.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.bossbar:
    begin: (bossbar) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.bossbar'
  generated.commands.execute.store.success.bossbar:
    patterns:
      - include: '#generated.command.execute.store.success.bossbar.id'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.bossbar.id:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.store.success.bossbar.id'
  generated.commands.execute.store.success.bossbar.id:
    patterns:
      - include: '#generated.command.execute.store.success.bossbar.id.max'
      - include: '#generated.command.execute.store.success.bossbar.id.value'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.bossbar.id.max:
    begin: (max) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.bossbar.id.max'
  generated.commands.execute.store.success.bossbar.id.max:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.bossbar.id.value:
    begin: (value) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.bossbar.id.value'
  generated.commands.execute.store.success.bossbar.id.value:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity'
  generated.commands.execute.store.success.entity:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.entity.target'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.entity.target'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.entity.target'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.store.success.entity.target'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.store.success.entity.target:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.success.entity.target.path:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target.path.byte'
      - include: '#generated.command.execute.store.success.entity.target.path.double'
      - include: '#generated.command.execute.store.success.entity.target.path.float'
      - include: '#generated.command.execute.store.success.entity.target.path.int'
      - include: '#generated.command.execute.store.success.entity.target.path.long'
      - include: '#generated.command.execute.store.success.entity.target.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.byte'
  generated.commands.execute.store.success.entity.target.path.byte:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target.path.byte.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.byte.scale
  generated.commands.execute.store.success.entity.target.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.double'
  generated.commands.execute.store.success.entity.target.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.success.entity.target.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.double.scale
  generated.commands.execute.store.success.entity.target.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.float'
  generated.commands.execute.store.success.entity.target.path.float:
    patterns:
      - include: >-
          #generated.command.execute.store.success.entity.target.path.float.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.float.scale
  generated.commands.execute.store.success.entity.target.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.int'
  generated.commands.execute.store.success.entity.target.path.int:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target.path.int.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.int.scale
  generated.commands.execute.store.success.entity.target.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.long'
  generated.commands.execute.store.success.entity.target.path.long:
    patterns:
      - include: '#generated.command.execute.store.success.entity.target.path.long.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.long.scale
  generated.commands.execute.store.success.entity.target.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.entity.target.path.short'
  generated.commands.execute.store.success.entity.target.path.short:
    patterns:
      - include: >-
          #generated.command.execute.store.success.entity.target.path.short.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.entity.target.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.entity.target.path.short.scale
  generated.commands.execute.store.success.entity.target.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.score:
    begin: (score) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.score'
  generated.commands.execute.store.success.score:
    patterns:
      - include: '#generated.command.execute.store.success.score.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.score.targets:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets'
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets'
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.store.success.score.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.store.success.score.targets:
    patterns:
      - include: '#generated.command.execute.store.success.score.targets.objective'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.score.targets.objective:
    patterns:
      - begin: '([\w\.\-\+]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: '#generated.commands.execute.store.success.score.targets.objective'
  generated.commands.execute.store.success.score.targets.objective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage:
    begin: (storage) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage'
  generated.commands.execute.store.success.storage:
    patterns:
      - include: '#generated.command.execute.store.success.storage.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.store.success.storage.target'
  generated.commands.execute.store.success.storage.target:
    patterns:
      - include: '#generated.command.execute.store.success.storage.target.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.store.success.storage.target.path:
    patterns:
      - include: '#generated.command.execute.store.success.storage.target.path.byte'
      - include: '#generated.command.execute.store.success.storage.target.path.double'
      - include: '#generated.command.execute.store.success.storage.target.path.float'
      - include: '#generated.command.execute.store.success.storage.target.path.int'
      - include: '#generated.command.execute.store.success.storage.target.path.long'
      - include: '#generated.command.execute.store.success.storage.target.path.short'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.byte:
    begin: (byte) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.byte'
  generated.commands.execute.store.success.storage.target.path.byte:
    patterns:
      - include: >-
          #generated.command.execute.store.success.storage.target.path.byte.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.byte.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.byte.scale
  generated.commands.execute.store.success.storage.target.path.byte.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.double:
    begin: (double) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.double'
  generated.commands.execute.store.success.storage.target.path.double:
    patterns:
      - include: >-
          #generated.command.execute.store.success.storage.target.path.double.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.double.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.double.scale
  generated.commands.execute.store.success.storage.target.path.double.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.float:
    begin: (float) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.float'
  generated.commands.execute.store.success.storage.target.path.float:
    patterns:
      - include: >-
          #generated.command.execute.store.success.storage.target.path.float.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.float.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.float.scale
  generated.commands.execute.store.success.storage.target.path.float.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.int:
    begin: (int) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.int'
  generated.commands.execute.store.success.storage.target.path.int:
    patterns:
      - include: '#generated.command.execute.store.success.storage.target.path.int.scale'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.int.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.int.scale
  generated.commands.execute.store.success.storage.target.path.int.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.long:
    begin: (long) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.long'
  generated.commands.execute.store.success.storage.target.path.long:
    patterns:
      - include: >-
          #generated.command.execute.store.success.storage.target.path.long.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.long.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.long.scale
  generated.commands.execute.store.success.storage.target.path.long.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.short:
    begin: (short) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.store.success.storage.target.path.short'
  generated.commands.execute.store.success.storage.target.path.short:
    patterns:
      - include: >-
          #generated.command.execute.store.success.storage.target.path.short.scale
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.store.success.storage.target.path.short.scale:
    patterns:
      - begin: (\-?\d*\.?\d+) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_17
        patterns:
          - include: >-
              #generated.commands.execute.store.success.storage.target.path.short.scale
  generated.commands.execute.store.success.storage.target.path.short.scale:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless:
    begin: (unless) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless'
  generated.commands.execute.unless:
    patterns:
      - include: '#generated.command.execute.unless.block'
      - include: '#generated.command.execute.unless.blocks'
      - include: '#generated.command.execute.unless.data'
      - include: '#generated.command.execute.unless.entity'
      - include: '#generated.command.execute.unless.predicate'
      - include: '#generated.command.execute.unless.score'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.block'
  generated.commands.execute.unless.block:
    patterns:
      - include: '#generated.command.execute.unless.block.pos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.block.pos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.unless.block.pos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.unless.block.pos'
  generated.commands.execute.unless.block.pos:
    patterns:
      - include: '#generated.command.execute.unless.block.pos.block'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.block.pos.block:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.unless.block.pos.block'
      - begin: >-
          (\#)(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_13
        patterns:
          - include: '#generated.commands.execute.unless.block.pos.block'
  generated.commands.execute.unless.block.pos.block:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks:
    begin: (blocks) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.blocks'
  generated.commands.execute.unless.blocks:
    patterns:
      - include: '#generated.command.execute.unless.blocks.start'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks.start:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start'
  generated.commands.execute.unless.blocks.start:
    patterns:
      - include: '#generated.command.execute.unless.blocks.start.end'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks.start.end:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start.end'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start.end'
  generated.commands.execute.unless.blocks.start.end:
    patterns:
      - include: '#generated.command.execute.unless.blocks.start.end.destination'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks.start.end.destination:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start.end.destination'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.unless.blocks.start.end.destination'
  generated.commands.execute.unless.blocks.start.end.destination:
    patterns:
      - include: '#generated.command.execute.unless.blocks.start.end.destination.all'
      - include: '#generated.command.execute.unless.blocks.start.end.destination.masked'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks.start.end.destination.all:
    begin: (all)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.blocks.start.end.destination.all'
  generated.commands.execute.unless.blocks.start.end.destination.all:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.blocks.start.end.destination.masked:
    begin: (masked)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.blocks.start.end.destination.masked'
  generated.commands.execute.unless.blocks.start.end.destination.masked:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data:
    begin: (data) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.data'
  generated.commands.execute.unless.data:
    patterns:
      - include: '#generated.command.execute.unless.data.block'
      - include: '#generated.command.execute.unless.data.entity'
      - include: '#generated.command.execute.unless.data.storage'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.block:
    begin: (block) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.data.block'
  generated.commands.execute.unless.data.block:
    patterns:
      - include: '#generated.command.execute.unless.data.block.sourcePos'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.block.sourcePos:
    patterns:
      - begin: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+)) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_6
        patterns:
          - include: '#generated.commands.execute.unless.data.block.sourcePos'
      - begin: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (?=\S)
        end: (?=\n)
        beginCaptures: *ref_7
        patterns:
          - include: '#generated.commands.execute.unless.data.block.sourcePos'
  generated.commands.execute.unless.data.block.sourcePos:
    patterns:
      - include: '#generated.command.execute.unless.data.block.sourcePos.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.block.sourcePos.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.unless.data.block.sourcePos.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.data.entity'
  generated.commands.execute.unless.data.entity:
    patterns:
      - include: '#generated.command.execute.unless.data.entity.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.entity.source:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.data.entity.source'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.data.entity.source'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.data.entity.source'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.unless.data.entity.source'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.data.entity.source:
    patterns:
      - include: '#generated.command.execute.unless.data.entity.source.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.entity.source.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.unless.data.entity.source.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.storage:
    begin: (storage) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.data.storage'
  generated.commands.execute.unless.data.storage:
    patterns:
      - include: '#generated.command.execute.unless.data.storage.source'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.storage.source:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)
          (?=\S)
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.unless.data.storage.source'
  generated.commands.execute.unless.data.storage.source:
    patterns:
      - include: '#generated.command.execute.unless.data.storage.source.path'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.data.storage.source.path:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.unless.data.storage.source.path:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.entity:
    begin: (entity) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.entity'
  generated.commands.execute.unless.entity:
    patterns:
      - include: '#generated.command.execute.unless.entity.entities'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.entity.entities:
    patterns:
      - begin: '(\@[parse])( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.entity.entities'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.entity.entities'
      - begin: (\w+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.entity.entities'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\])( |(?=\n))'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.unless.entity.entities'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.entity.entities:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.predicate:
    begin: (predicate) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.predicate'
  generated.commands.execute.unless.predicate:
    patterns:
      - include: '#generated.command.execute.unless.predicate.predicate'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.predicate.predicate:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.execute.unless.predicate.predicate'
  generated.commands.execute.unless.predicate.predicate:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score:
    begin: (score) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score'
  generated.commands.execute.unless.score:
    patterns:
      - include: '#generated.command.execute.unless.score.target'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: '#generated.commands.execute.unless.score.target'
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: '#generated.commands.execute.unless.score.target'
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.score.target'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.score.target'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.unless.score.target'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.unless.score.target'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target:
    patterns:
      - include: '#generated.command.execute.unless.score.target.targetObjective'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective:
    patterns:
      - begin: '([\w\.\-\+]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: '#generated.commands.execute.unless.score.target.targetObjective'
  generated.commands.execute.unless.score.target.targetObjective:
    patterns:
      - include: '#generated.command.execute.unless.score.target.targetObjective.<'
      - include: '#generated.command.execute.unless.score.target.targetObjective.<='
      - include: '#generated.command.execute.unless.score.target.targetObjective.='
      - include: '#generated.command.execute.unless.score.target.targetObjective.>'
      - include: '#generated.command.execute.unless.score.target.targetObjective.>='
      - include: '#generated.command.execute.unless.score.target.targetObjective.matches'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<:
    begin: (<) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score.target.targetObjective.<'
  generated.commands.execute.unless.score.target.targetObjective.<:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.<.source
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.unless.score.target.targetObjective.<.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target.targetObjective.<.source:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.<.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<.source.sourceObjective
  generated.commands.execute.unless.score.target.targetObjective.<.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<=:
    begin: (<=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score.target.targetObjective.<='
  generated.commands.execute.unless.score.target.targetObjective.<=:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.<=.source
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.unless.score.target.targetObjective.<=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target.targetObjective.<=.source:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.<=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.<=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.<=.source.sourceObjective
  generated.commands.execute.unless.score.target.targetObjective.<=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.=:
    begin: (=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score.target.targetObjective.='
  generated.commands.execute.unless.score.target.targetObjective.=:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.=.source
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.unless.score.target.targetObjective.=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target.targetObjective.=.source:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.=.source.sourceObjective
  generated.commands.execute.unless.score.target.targetObjective.=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>:
    begin: (>) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score.target.targetObjective.>'
  generated.commands.execute.unless.score.target.targetObjective.>:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.>.source
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.unless.score.target.targetObjective.>.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target.targetObjective.>.source:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.>.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>.source.sourceObjective
  generated.commands.execute.unless.score.target.targetObjective.>.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>=:
    begin: (>=) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.unless.score.target.targetObjective.>='
  generated.commands.execute.unless.score.target.targetObjective.>=:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.>=.source
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>=.source:
    patterns:
      - begin: (\*) (?=\S)
        end: (?=\n)
        beginCaptures: *ref_14
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source
      - begin: '([\w\.\-\#\$\%]+) (?=\S)'
        end: (?=\n)
        beginCaptures: *ref_15
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: >-
                  #generated.commands.execute.unless.score.target.targetObjective.>=.source
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.execute.unless.score.target.targetObjective.>=.source:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.>=.source.sourceObjective
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.>=.source.sourceObjective:
    patterns:
      - begin: '([\w\.\-\+]+)( |(?=\n))'
        end: (?=\n)
        beginCaptures: *ref_16
        patterns:
          - include: >-
              #generated.commands.execute.unless.score.target.targetObjective.>=.source.sourceObjective
  generated.commands.execute.unless.score.target.targetObjective.>=.source.sourceObjective:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.matches:
    begin: (matches) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: >-
          #generated.commands.execute.unless.score.target.targetObjective.matches
  generated.commands.execute.unless.score.target.targetObjective.matches:
    patterns:
      - include: >-
          #generated.command.execute.unless.score.target.targetObjective.matches.range
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.execute.unless.score.target.targetObjective.matches.range:
    patterns:
      - include: '#error.unknown_parser'
  generated.commands.execute.unless.score.target.targetObjective.matches.range:
    patterns:
      - include: '#generated.commands.execute'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.function:
    begin: (function) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.function'
  generated.commands.function:
    patterns:
      - include: '#generated.command.function.name'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.function.name:
    patterns:
      - begin: >-
          (?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_12
        patterns:
          - include: '#generated.commands.function.name'
      - begin: >-
          (\#)(?:([a-z0-9_\.\-]+)(\:))?([a-z0-9_\.\-]+)((?:\/?[a-z0-9_\.\-]+)*)(
          |(?=\n))
        end: (?=\n)
        beginCaptures: *ref_13
        patterns:
          - include: '#generated.commands.function.name'
  generated.commands.function.name:
    patterns:
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.say:
    begin: (say) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.say'
  generated.commands.say:
    patterns:
      - include: '#generated.command.say.message'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.say.message:
    patterns:
      - include: '#common.message'
  generated.commands.say.message:
    patterns:
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.tellraw:
    begin: (tellraw) (?=\S)
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.tellraw'
  generated.commands.tellraw:
    patterns:
      - include: '#generated.command.tellraw.targets'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.tellraw.targets:
    patterns:
      - begin: '(\@[parse]) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=\S)'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: (\w+) (?=\S)
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=\S)'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.tellraw.targets'
          - include: '#target_selector.content'
          - include: '#error.bad_syntax'
  generated.commands.tellraw.targets:
    patterns:
      - include: '#generated.command.tellraw.targets.message'
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
  generated.command.tellraw.targets.message:
    patterns:
      - include: '#text_component'
  generated.commands.tellraw.targets.message:
    patterns:
      - include: '#common.trailing_whitespace'
      - include: '#error.unmatched_child'
