name: mcfunction-snapshot
scopeName: source.mcfunction-snapshot
fileTypes:
  - mcfunction
patterns:
  - include: '#comment'
  - include: '#command'
  - include: '#unknown'
repository:
  comment:
    patterns:
      - name: meta._.comment.mcfunction
        begin: '^[ \t]*(?=\#)'
        end: \n
        patterns:
          - include: '#comments'
  comments:
    patterns:
      - include: '#comment.heading'
      - include: '#comment.marker'
      - include: '#comment.annotation'
      - include: '#comment.other'
  comment.heading:
    name: meta._.heading.comment.mcfunction
    match: '(##)[ \t]*(.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.heading._.heading.comment.mcfunction
  comment.marker:
    name: meta._.marker.comment.mcfunction
    match: '(#)[ \t]*((?:TODO|FIXME|XXX))(\b.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.bold._.name.marker.comment.mcfunction
      '3':
        name: comment._.text.marker.comment.mcfunction
  comment.annotation:
    name: meta._.annotation.comment.mcfunction
    match: '(#)[ \t]*(\@\w*)(\b.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
      '2':
        name: markup.heading._.name.annotation.comment.mcfunction
      '3':
        name: comment._.text.annotation.comment.mcfunction
  comment.other:
    name: meta._.other.comment.mcfunction
    match: '(#.*)$'
    captures:
      '1':
        name: comment._.comment.mcfunction
  command:
    name: meta._.command.mcfunction
    begin: '^[ \t]*(?=[^\s\#])'
    end: \n
    patterns:
      - include: '#commands'
  commands:
    patterns:
      - include: '#generated.commands'
  unknown:
    name: meta._.unknown.mcfunction
    match: ^((.*))$
    captures: &ref_0
      '1':
        name: invalid.illegal._.invalid.mcfunction
      '2':
        name: markup.underline._.underline.mcfunction
  error.command_line:
    name: meta._.unknown_command.mcfunction
    match: ((.*))$
    captures: *ref_0
  error.compound_value:
    patterns:
      - include: '#error.block_value'
      - match: '(([^\n\}\,]))'
        captures: *ref_0
  error.list_value:
    patterns:
      - include: '#error.block_value'
      - match: '(([^\n\]\,]))'
        captures: *ref_0
  error.block_value:
    patterns:
      - include: '#error.dict'
      - include: '#error.list'
      - include: '#error.quoted_string'
  error.block:
    patterns:
      - match: '(([^\n\{\}\[\]\"\'']+))'
        captures: *ref_0
      - include: '#error.block_value'
  error.dict:
    patterns:
      - begin: '((\{))'
        end: '((?=\n)|(\}))'
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.block'
  error.list:
    patterns:
      - begin: '((\[))'
        end: '((?=\n)|(\]))'
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.block'
  error.quoted_string:
    patterns:
      - include: '#error.double_quoted_string'
      - include: '#error.single_quoted_string'
  error.double_quoted_string:
    patterns:
      - begin: ((\"))
        end: ((?=\n)|(\"))
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.double_quoted_string.content'
  error.single_quoted_string:
    patterns:
      - begin: ((\'))
        end: ((?=\n)|(\'))
        beginCaptures: *ref_0
        endCaptures: *ref_0
        patterns:
          - include: '#error.single_quoted_string.content'
  error.double_quoted_string.content:
    patterns:
      - match: '(([^\\\"\n]))'
        captures: *ref_0
      - match: '((\\[^\n]))'
        captures: *ref_0
      - match: ((\\))
        captures: *ref_0
  error.single_quoted_string.content:
    patterns:
      - match: '(([^\\\''\n]))'
        captures: *ref_0
      - match: '((\\[^\n]))'
        captures: *ref_0
      - match: ((\\))
        captures: *ref_0
  common.block:
    patterns:
      - match: '[^\n\{\}\[\]\"\'']+'
        name: string._.content.dict.generic.mcfunction
      - include: '#common.dict'
      - include: '#common.list'
      - include: '#common.quoted_string'
  common.dict:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: &ref_4
          '1':
            name: storage._.bracket.dict.generic.mcfunction
        endCaptures: &ref_5
          '1':
            name: storage._.bracket.dict.generic.mcfunction
        patterns:
          - include: '#common.block'
  common.list:
    patterns:
      - begin: '(\[)'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: storage._.bracket.list.generic.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.list.generic.mcfunction
        patterns:
          - include: '#common.block'
  common.dict.whitespace:
    patterns:
      - match: '(?<=[\{\,]) +(?=[^\}\,])'
      - match: '(?<=[^\{\,]) +(?=[\}\,])'
      - match: '(?<=\{) +(?=\})'
  common.list.whitespace:
    patterns:
      - match: '(?<=[\[\,]) +(?=[^\]\,])'
      - match: '(?<=[^\[\,]) +(?=[\]\,])'
      - match: '(?<=\[) +(?=\])'
  common.boolean:
    patterns:
      - match: (?<!\w)(true|false)(?!\w)
        name: constant.numeric._.boolean.mcfunction
  common.number:
    patterns:
      - match: (?<!\d)(\-?\d*\.?\d+)(?!\d)
        name: constant.numeric._.number.mcfunction
  common.position:
    patterns:
      - include: '#common.position.abs_rel'
      - include: '#common.position.local'
  common.position.abs_rel:
    patterns:
      - match: >-
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
        captures: &ref_6
          '1':
            name: keyword.control._.operator.relative.position.mcfunction
          '2':
            name: constant.numeric._.number.relative.position.mcfunction
          '3':
            name: constant.numeric._.number.absolute.position.mcfunction
          '4':
            name: keyword.control._.operator.relative.position.mcfunction
          '5':
            name: constant.numeric._.number.relative.position.mcfunction
          '6':
            name: constant.numeric._.number.absolute.position.mcfunction
          '7':
            name: keyword.control._.operator.relative.position.mcfunction
          '8':
            name: constant.numeric._.number.relative.position.mcfunction
          '9':
            name: constant.numeric._.number.absolute.position.mcfunction
  common.position.local:
    patterns:
      - match: (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)?
        captures: &ref_7
          '1':
            name: keyword.control._.operator.local.position.mcfunction
          '2':
            name: constant.numeric._.number.local.position.mcfunction
          '3':
            name: keyword.control._.operator.local.position.mcfunction
          '4':
            name: constant.numeric._.number.local.position.mcfunction
          '5':
            name: keyword.control._.operator.local.position.mcfunction
          '6':
            name: constant.numeric._.number.local.position.mcfunction
  common.unquoted_string:
    patterns:
      - match: '([\w\.\-\+]+)'
        name: string._.word.mcfunction
  common.double_quoted_string:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: &ref_1
          '1':
            name: string._.string.mcfunction
        endCaptures: &ref_2
          '1':
            name: string._.string.mcfunction
        patterns:
          - include: '#common.double_quoted_string.content'
  common.single_quoted_string:
    patterns:
      - begin: (\')
        end: (?=\n)|(\')
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#common.single_quoted_string.content'
  common.double_quoted_string.content:
    patterns:
      - match: '[^\\\"\n]'
        name: string._.string.mcfunction
      - match: '\\[^\n]'
        name: constant.character.escape._.string_escape.mcfunction
      - match: ((\\))
        captures: *ref_0
  common.single_quoted_string.content:
    patterns:
      - match: '[^\\\''\n]'
        name: string._.string.mcfunction
      - match: '\\[^\n]'
        name: constant.character.escape._.string_escape.mcfunction
      - match: ((\\))
        captures: *ref_0
  common.quoted_string:
    patterns:
      - include: '#common.double_quoted_string'
      - include: '#common.single_quoted_string'
  common.quotable_string:
    patterns:
      - include: '#common.quoted_string'
      - include: '#common.unquoted_string'
  common.integer_range:
    patterns:
      - match: (\-?\d*)(\.\.)(\-?\d*)?
        captures: &ref_3
          '1':
            name: constant.numeric._.minimum.range.mcfunction
          '2':
            name: keyword.control._.ellipsis.range.mcfunction
          '3':
            name: constant.numeric._.maximum.range.mcfunction
      - match: (\-?\d*)?(\.\.)(\-?\d*)
        captures: *ref_3
      - match: (\-?\d*)
        name: constant.numeric._.number.mcfunction
  common.double_range:
    patterns:
      - match: (\-?\d*\.?\d+)(\.\.)(\-?\d*\.?\d+)?
        captures: *ref_3
      - match: (\-?\d*\.?\d+)?(\.\.)(\-?\d*\.?\d+)
        captures: *ref_3
      - match: (\-?\d*\.?\d+)
        name: constant.numeric._.number.mcfunction
  common.resource_location:
    patterns:
      - match: '([a-z0-9_\.\-]+)?(\:)?([a-z0-9_\.\-\/]+)'
        captures:
          '1':
            name: entity.name.function._.namespace.resource_location.mcfunction
          '2':
            name: entity.name.function._.colon.resource_location.mcfunction
          '3':
            name: entity.name.function._.path.resource_location.mcfunction
  common.tagged_resource_location:
    patterns:
      - match: '(\#)([a-z0-9_\.\-]+)?(\:)?([a-z0-9_\.\-\/]+)'
        captures:
          '1':
            name: entity.name.function._.hash.resource_location.mcfunction
          '2':
            name: entity.name.function._.namespace.resource_location.mcfunction
          '3':
            name: entity.name.function._.colon.resource_location.mcfunction
          '4':
            name: entity.name.function._.path.resource_location.mcfunction
  common.taggable_resource_location:
    patterns:
      - include: '#common.tagged_resource_location'
      - include: '#common.resource_location'
  common.message:
    patterns:
      - match: '([^\@\n]+)'
        name: string._.string.mcfunction
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        endCaptures:
          '1':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - include: '#target_selector.content'
          - include: '#error.command_line'
      - match: '(\@[parse])'
        name: support.class._.base.target_selector.mcfunction
      - match: '([^\n])'
        name: string._.string.mcfunction
  nbt.compound:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_4
        endCaptures: *ref_5
        patterns:
          - include: '#nbt.compound.content'
  nbt.compound.content:
    patterns:
      - include: '#common.block'
  nbt_path:
    patterns:
      - include: '#common.double_quoted_string.content'
  score_map.content:
    patterns:
      - include: '#common.block'
  advancement_map.content:
    patterns:
      - include: '#common.block'
  text_component:
    patterns:
      - include: '#text_component.boolean'
      - include: '#text_component.number'
      - include: '#text_component.string'
      - include: '#text_component.list'
      - include: '#text_component.dict'
  text_component.boolean:
    patterns:
      - include: '#common.boolean'
  text_component.number:
    patterns:
      - include: '#common.number'
  text_component.string:
    patterns:
      - include: '#common.double_quoted_string'
  text_component.atomic:
    patterns:
      - include: '#text_component.boolean'
      - include: '#text_component.number'
      - include: '#text_component.string'
  text_component.string.color:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: >-
              (black|dark_blue|dark_green|dark_aqua|dark_red|dark_purple|gold|gray|dark_gray|blue|green|aqua|red|light_purple|yellow|white)
            name: string._.color.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.string.keybind:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: >-
              (key\.forward|key\.left|key\.back|key\.right|key\.jump|key\.sneak|key\.sprint|key\.inventory|key\.swapHands|key\.drop|key\.use|key\.attack|key\.pickItem|key\.chat|key\.playerlist|key\.command|key\.screenshot|key\.togglePerspective|key\.smoothCamera|key\.fullscreen|key\.spectatorOutlines|key\.hotbar\.1|key\.hotbar\.2|key\.hotbar\.3|key\.hotbar\.4|key\.hotbar\.5|key\.hotbar\.6|key\.hotbar\.7|key\.hotbar\.8|key\.hotbar\.9|key\.saveToolbarActivator|key\.loadToolbarActivator)
            name: string._.keybind.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.command_string:
    patterns:
      - begin: (\")(\/)
        end: (?=\n)|(\")
        beginCaptures:
          '1':
            name: string._.string.mcfunction
          '2':
            name: keyword.control._.command.mcfunction
        endCaptures: *ref_2
        patterns:
          - include: '#commands'
  text_component.string.target:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.target.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.target.content:
    patterns:
      - match: '(?<=\")(\@[parse])(?=\")'
        name: support.class._.base.target_selector.mcfunction
      - match: '(?<=\")([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})(?=\")'
        name: support.class._.uuid.target.mcfunction
      - match: (?<=\")(\w+)(?=\")
        name: support.class._.player_name.target.mcfunction
      - begin: '(?<=\")(\@[parse])(\[)(?= *[\w\]])'
        end: '(?=\n)|(?=\")|(\])(?=\")'
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        endCaptures:
          '1':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - include: '#target_selector.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.nbt:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.nbt.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.nbt.content:
    patterns:
      - include: '#nbt_path'
  text_component.string.position:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.position.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.position.content:
    patterns:
      - match: >-
          (?<=\")(?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))
          (?:(\~)(\-?\d*\.?\d+)?|(\-?\d*\.?\d+))(?=\")
        captures: *ref_6
      - match: >-
          (?<=\")(\^)(\-?\d*\.?\d+)? (\^)(\-?\d*\.?\d+)?
          (\^)(\-?\d*\.?\d+)?(?=\")
        captures: *ref_7
  text_component.string.score_holder:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.score_holder.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.score_holder.content:
    patterns:
      - match: (?<=\")(\*)(?=\")
        name: support.class._.all.score_holder.mcfunction
      - match: '(?<=\")([\w\.\-\#\$\%]+)(?=\")'
        name: support.class._.fakeplayer.score_holder.mcfunction
      - include: '#text_component.string.target.content'
  text_component.string.objective:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#text_component.string.objective.content'
          - include: '#error.double_quoted_string.content'
  text_component.string.objective.content:
    patterns:
      - match: '(?<=\")([\w\.\-\+]+)(?=\")'
        name: entity.other.attribute-name._.scoreboard_objective.mcfunction
  text_component.string.click_event:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: (open_url|open_file|run_command|suggest_command|change_page)
            name: string._.event.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.string.hover_event:
    patterns:
      - begin: (\")
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - match: (show_text|show_item|show_entity)
            name: string._.event.property.text_component.mcfunction
          - include: '#error.double_quoted_string.content'
  text_component.nbt_compound_string:
    patterns:
      - begin: '(\")(?=\{)'
        end: (?=\n)|(\")
        beginCaptures: *ref_1
        endCaptures: *ref_2
        patterns:
          - include: '#nbt.compound'
  text_component.list_common:
    patterns:
      - match: '(?<=[^\[\,])(\,)(?=[^\]\,])'
        captures:
          '1':
            name: storage._.comma.text_component.mcfunction
      - include: '#common.list.whitespace'
  text_component.list:
    patterns:
      - begin: '(\[)'
        end: '(?=\n)|(\])'
        beginCaptures:
          '1':
            name: storage._.bracket.text_component.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.text_component.mcfunction
        patterns:
          - include: '#text_component.list_common'
          - include: '#text_component.list_values'
  text_component.list_values:
    patterns:
      - include: '#text_component'
      - include: '#error.list_value'
  text_component.dict_common:
    patterns:
      - match: '(?<=[^\{\,])(\,)(?=[^\}\,])'
        captures:
          '1':
            name: storage._.comma.text_component.mcfunction
      - include: '#common.dict.whitespace'
  text_component.dict:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: &ref_8
          '1':
            name: storage._.bracket.text_component.mcfunction
        endCaptures: &ref_9
          '1':
            name: storage._.bracket.text_component.mcfunction
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties'
  text_component.dict.score:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.score'
  text_component.dict.click_event:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.click_event'
  text_component.dict.hover_event:
    patterns:
      - begin: '(\{)'
        end: '(?=\n)|(\})'
        beginCaptures: *ref_8
        endCaptures: *ref_9
        patterns:
          - include: '#text_component.dict_common'
          - include: '#text_component.properties.hover_event'
  text_component.properties:
    patterns:
      - include: '#text_component.property.b_i_u_s_o'
      - include: '#text_component.property.color'
      - include: '#text_component.property.text_translate'
      - include: '#text_component.property.extra_with'
      - include: '#text_component.property.selector'
      - include: '#text_component.property.score'
      - include: '#text_component.property.keybind'
      - include: '#text_component.property.insertion'
      - include: '#text_component.property.click_event'
      - include: '#text_component.property.hover_event'
      - include: '#text_component.property.nbt'
      - include: '#text_component.property.entity'
      - include: '#text_component.property.block'
      - include: '#text_component.property.interpret'
      - include: '#error.compound_value'
  text_component.property.b_i_u_s_o:
    patterns:
      - begin: >-
          (\")(bold|italic|underlined|strikethrough|obfuscated)(\") *(\:)
          *(?=[^\s\,\}])
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: &ref_10
          '1':
            name: string._.string.mcfunction
          '2':
            name: string._.property.text_component.mcfunction
          '3':
            name: string._.string.mcfunction
          '4':
            name: storage._.compound_colon.nbt.mcfunction
        patterns:
          - include: '#text_component.boolean'
          - include: '#error.compound_value'
  text_component.property.text_translate:
    patterns:
      - begin: '(\")(text|translate)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.atomic'
          - include: '#error.compound_value'
  text_component.property.color:
    patterns:
      - begin: '(\")(color)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.color'
          - include: '#error.compound_value'
  text_component.property.extra_with:
    patterns:
      - begin: '(\")(extra|with)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.list'
          - include: '#error.compound_value'
  text_component.property.selector:
    patterns:
      - begin: '(\")(selector)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.target'
          - include: '#error.compound_value'
  text_component.property.score:
    patterns:
      - begin: '(\")(score)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.score'
          - include: '#error.compound_value'
  text_component.property.keybind:
    patterns:
      - begin: '(\")(keybind)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.keybind'
          - include: '#error.compound_value'
  text_component.property.insertion:
    patterns:
      - begin: '(\")(insertion)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.command_string'
          - include: '#text_component.string'
          - include: '#error.compound_value'
  text_component.property.click_event:
    patterns:
      - begin: '(\")(clickEvent)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.click_event'
          - include: '#error.compound_value'
  text_component.property.hover_event:
    patterns:
      - begin: '(\")(hoverEvent)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.dict.hover_event'
          - include: '#error.compound_value'
  text_component.property.nbt:
    patterns:
      - begin: '(\")(nbt)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.nbt'
          - include: '#error.compound_value'
  text_component.property.entity:
    patterns:
      - begin: '(\")(entity)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.target'
          - include: '#error.compound_value'
  text_component.property.block:
    patterns:
      - begin: '(\")(block)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.position'
          - include: '#error.compound_value'
  text_component.property.interpret:
    patterns:
      - begin: '(\")(interpret)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.boolean'
          - include: '#error.compound_value'
  text_component.properties.score:
    patterns:
      - include: '#text_component.property.score.name'
      - include: '#text_component.property.score.objective'
      - include: '#text_component.property.score.value'
      - include: '#error.compound_value'
  text_component.property.score.name:
    patterns:
      - begin: '(\")(name)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.score_holder'
          - include: '#error.compound_value'
  text_component.property.score.objective:
    patterns:
      - begin: '(\")(objective)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.objective'
          - include: '#error.compound_value'
  text_component.property.score.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.atomic'
          - include: '#error.compound_value'
  text_component.properties.click_event:
    patterns:
      - include: '#text_component.property.click_event.action'
      - include: '#text_component.property.click_event.value'
      - include: '#error.compound_value'
  text_component.property.click_event.action:
    patterns:
      - begin: '(\")(action)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.click_event'
          - include: '#error.compound_value'
  text_component.property.click_event.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.command_string'
          - include: '#text_component.string'
          - include: '#error.compound_value'
  text_component.properties.hover_event:
    patterns:
      - include: '#text_component.property.hover_event.action'
      - include: '#text_component.property.hover_event.value'
      - include: '#error.compound_value'
  text_component.property.hover_event.action:
    patterns:
      - begin: '(\")(action)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.string.hover_event'
          - include: '#error.compound_value'
  text_component.property.hover_event.value:
    patterns:
      - begin: '(\")(value)(\") *(\:) *(?=[^\s\,\}])'
        end: '(?=\n)|(?= *[\,\}])'
        beginCaptures: *ref_10
        patterns:
          - include: '#text_component.nbt_compound_string'
          - include: '#text_component'
          - include: '#error.compound_value'
  target_selector.content:
    patterns:
      - name: meta._.argument_separator.content.target_selector.mcfunction
        match: '(?<=[^\[\,])(\,)(?= *\w)'
        captures:
          '1':
            name: support.class._.comma.target_selector.mcfunction
      - match: '(?<=[\[\,]) +(?=\w)'
      - match: '(?<=[^\[\,]) +(?=[\]\,])'
      - match: '(?<=\[) +(?=\])'
      - include: '#target_selector.arguments'
  target_selector.arguments:
    patterns:
      - include: '#target_selector.content.argument.xyz'
      - include: '#target_selector.content.argument.dxyz'
      - include: '#target_selector.content.argument.xy_rotation'
      - include: '#target_selector.content.argument.distance'
      - include: '#target_selector.content.argument.team'
      - include: '#target_selector.content.argument.tag'
      - include: '#target_selector.content.argument.name'
      - include: '#target_selector.content.argument.type'
      - include: '#target_selector.content.argument.level'
      - include: '#target_selector.content.argument.gamemode'
      - include: '#target_selector.content.argument.sort'
      - include: '#target_selector.content.argument.limit'
      - include: '#target_selector.content.argument.scores'
      - include: '#target_selector.content.argument.advancements'
      - include: '#target_selector.content.argument.nbt'
  target_selector.content.argument.xyz:
    patterns:
      - name: meta._.xyz.argument.content.target_selector.mcfunction
        match: '(x|y|z) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.dxyz:
    patterns:
      - name: meta._.dxyz.argument.content.target_selector.mcfunction
        match: '(dx|dy|dz) *(\=) *(\-?\d*\.?\d+) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.xy_rotation:
    patterns:
      - name: meta._.xy_rotation.argument.content.target_selector.mcfunction
        begin: '(x_rotation|y_rotation) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.double_range'
          - include: '#error.command_line'
  target_selector.content.argument.distance:
    patterns:
      - name: meta._.distance.argument.content.target_selector.mcfunction
        begin: '(distance) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.double_range'
          - include: '#error.command_line'
  target_selector.content.argument.team:
    patterns:
      - name: meta._.team.argument.content.target_selector.mcfunction
        match: '(team) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: entity.other.attribute-name._.scoreboard_team.mcfunction
  target_selector.content.argument.tag:
    patterns:
      - name: meta._.tag.argument.content.target_selector.mcfunction
        match: '(tag) *(\=) *(\!?) *([\w\.\-\+]+)? *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: entity.other.attribute-name._.entity_tag.mcfunction
  target_selector.content.argument.name:
    patterns:
      - name: meta._.name.argument.content.target_selector.mcfunction
        begin: (name) *(\=) *(\!?) *
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
        patterns:
          - include: '#common.quotable_string'
          - include: '#error.command_line'
  target_selector.content.argument.type:
    patterns:
      - name: meta._.type.argument.content.target_selector.mcfunction
        begin: '(type) *(\=) *(\!?) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
        patterns:
          - include: '#common.taggable_resource_location'
          - include: '#error.command_line'
  target_selector.content.argument.level:
    patterns:
      - name: meta._.level.argument.content.target_selector.mcfunction
        begin: '(level) *(\=) *(?=[^\n\]\,])'
        end: '(?=\n)| *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
        patterns:
          - include: '#common.integer_range'
          - include: '#error.command_line'
  target_selector.content.argument.gamemode:
    patterns:
      - name: meta._.gamemode.argument.content.target_selector.mcfunction
        match: >-
          (gamemode) *(\=) *(\!?) *(survival|creative|adventure|spectator)
          *(?=[\]\,])
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: keyword._.keyword.mcfunction
  target_selector.content.argument.sort:
    patterns:
      - name: meta._.sort.argument.content.target_selector.mcfunction
        match: '(sort) *(\=) *(arbitrary|furthest|nearest|random) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: keyword._.keyword.mcfunction
  target_selector.content.argument.limit:
    patterns:
      - name: meta._.limit.argument.content.target_selector.mcfunction
        match: '(limit) *(\=) *(0*[1-9]\d*) *(?=[\]\,])'
        captures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.numeric._.number.mcfunction
  target_selector.content.argument.scores:
    patterns:
      - name: meta._.scores.argument.content.target_selector.mcfunction
        begin: '(scores) *(\=) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: storage._.bracket.score_map.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.score_map.mcfunction
        patterns:
          - include: '#score_map.content'
  target_selector.content.argument.advancements:
    patterns:
      - name: meta._.advancements.argument.content.target_selector.mcfunction
        begin: '(advancements) *(\=) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: storage._.bracket.advancement_map.mcfunction
        endCaptures:
          '1':
            name: storage._.bracket.advancement_map.mcfunction
        patterns:
          - include: '#advancement_map.content'
  target_selector.content.argument.nbt:
    patterns:
      - name: meta._.nbt.argument.content.target_selector.mcfunction
        begin: '(nbt) *(\=) *(\!?) *(\{)'
        end: '(?=\n)|(\}) *(?=[\]\,])'
        beginCaptures:
          '1':
            name: keyword.other._.param.target_selector.mcfunction
          '2':
            name: support.class._.equals.target_selector.mcfunction
          '3':
            name: constant.character.escape._.not.target_selector.mcfunction
          '4':
            name: storage._.compound_bracket.nbt.mcfunction
        endCaptures:
          '1':
            name: storage._.compound_bracket.nbt.mcfunction
        patterns:
          - include: '#nbt.compound.content'
  generated.commands:
    patterns:
      - include: '#generated.command.say'
      - include: '#generated.command.tellraw'
      - include: '#generated.command.execute'
      - include: '#error.command_line'
  generated.command.say:
    begin: '(say) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.say'
  generated.commands.say:
    patterns:
      - include: '#generated.command.say.message'
      - include: '#error.command_line'
  generated.command.say.message:
    patterns:
      - include: '#common.message'
  generated.command.tellraw:
    begin: '(tellraw) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.tellraw'
  generated.commands.tellraw:
    patterns:
      - include: '#generated.command.tellraw.targets'
      - include: '#error.command_line'
  generated.command.tellraw.targets:
    patterns:
      - begin: '(\@[parse]) (?=[^\s\#])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4}) (?=[^\s\#])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: '(\w+) (?=[^\s\#])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.tellraw.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\]) (?=[^\s\#])'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.tellraw.targets'
          - include: '#target_selector.content'
          - include: '#error.command_line'
      - include: '#error.command_line'
  generated.commands.tellraw.targets:
    patterns:
      - include: '#text_component'
      - include: '#error.command_line'
  generated.command.execute:
    begin: '(execute) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.control._.command.mcfunction
    patterns:
      - include: '#generated.commands.execute'
  generated.commands.execute:
    patterns:
      - include: '#generated.command.execute.run'
      - include: '#generated.command.execute.as'
      - include: '#error.command_line'
  generated.command.execute.run:
    begin: (run)( |(?=\n))
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.run'
  generated.commands.execute.run:
    patterns:
      - include: '#generated.commands'
  generated.command.execute.as:
    begin: '(as) (?=[^\s\#])'
    end: (?=\n)
    beginCaptures:
      '1':
        name: keyword.other._.subcommand.mcfunction
    patterns:
      - include: '#generated.commands.execute.as'
  generated.commands.execute.as:
    patterns:
      - include: '#generated.command.execute.as.targets'
      - include: '#error.command_line'
  generated.command.execute.as.targets:
    patterns:
      - begin: '(\@[parse])( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '([0-9a-fA-F]+(?:(-)[0-9a-fA-F]+){4})( |(?=\n))'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.uuid.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: (\w+)( |(?=\n))
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.player_name.target.mcfunction
        patterns:
          - include: '#generated.commands.execute.as.targets'
      - begin: '(\@[parse])(\[)(?= *[\w\]])'
        end: (?=\n)
        beginCaptures:
          '1':
            name: support.class._.base.target_selector.mcfunction
          '2':
            name: support.class._.bracket.target_selector.mcfunction
        patterns:
          - begin: '(\])( |(?=\n))'
            end: (?=\n)
            beginCaptures:
              '1':
                name: support.class._.bracket.target_selector.mcfunction
            patterns:
              - include: '#generated.commands.execute.as.targets'
          - include: '#target_selector.content'
          - include: '#error.command_line'
      - include: '#error.command_line'
  generated.commands.execute.as.targets:
    patterns:
      - include: '#generated.commands.execute'
